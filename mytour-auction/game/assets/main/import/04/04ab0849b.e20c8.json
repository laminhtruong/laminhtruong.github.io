[1,["1b77d2bd0@6c48a","a1mseI+OhHy4jWJV7soaQU","1481fc330@6c48a","20g1ukYUVPvKWKBRznAKo+@f9941","e2uRISfu5MxLMoT+f2TEdu@f9941","3f+cYf8M1HWpC324nxVh5N","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","efYa2cEIxLkaGAdDs6fyN4","f2LUIzTXFB27URp0wgzSfe@f9941","e00c0trElNk4ufxzKBASLR","05qO9sO0FOxZUZCVS40L7y@f9941","7dzyiagg1AzpCatUj7TYz6@f9941","4c2Jo8N7tNVYqSJiNJc2et@f9941","0etiExXwtCpq7IYrVoYPKH@f9941","15DyFwMQ1BgKNwJkeUufkb@f9941","836yr8qLBBH6v4l45wp2l2@6c48a","80N5KweQdLTrDnUnhhvjbT@f9941","6b0NsFeBxGHqCEuATshga2@f9941","dbNjFFYhRKl5xkklvnEX3H@f9941","66K5aVxgpJHoJygy0mPi9P@f9941","6cbK/oCIpDSbpIKEhrUrM+@f9941","2765WnSjVAC7Rlkq/KyMu/@f9941","95n8HPgB1M5qf5gp/28Q9S@f9941","0eqPlk8X5Bl4BWddHuNMdk@f9941","f0AoR8FedEXZYASxZ1Wc6E@f9941","34wKytGwFPTbrLblcA+KkR@f9941","efCKldfmNKcJL8z0MHYPuD@f9941","969WVMeoRIt7JvKrq5OMI+","202V5kGHhJZ7memqox/m/J","cdn4kSYp5KJL/7i1KeRhOU@f9941","e3//fsD8lDu4j0CRz32Vx3@f9941","9a3ARx/blOiLcOUL/QTmbR@f9941","f3xB39PPRN0opigbVTd4SJ@f9941","d6KtrnGc5Kpb8o2KB/oAYN@f9941","8fBHL4KmpMRpdM/3PD2O/T@f9941","c1FM5BFTRNp4jM6VCwwco7@f9941","9ckP2qcZlP2bPf+Y7qZ7O9@f9941","ee25pAN0tHFI+euKi7f291@f9941","efU7uV9HdINaMhbpJpraBo@f9941","66NN5kTAVOi6dJqkNwg/OP@f9941","bdt7DKBupH/6XGMbUKIt1q","20g1ukYUVPvKWKBRznAKo+@6c48a","54TknWPwVPqJqeCR+Y/Czo@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","d1NGQ2rJZCcbhjH0/erZWw","c6H2Ccy51O54Wcjy/B/JbV","3a5kcRsFNL0pOcXFFFP6P3@f9941","2eiUnnIRFOr6bRGpnS5xob@f9941","02k+S16L5OZ6XZp69nqrNR@f9941","95sEPhj9BB16YxJNWg6eKP@f9941","9e8n7k7BVIo6YqnFVZH9WS@f9941","c4SB74d+FOP7g40SSo1DDL@f9941","5aPkMH/gROFpaVkm5Acup5@f9941","4dSEyVdzVF/KvaY3wBpcoh@f9941","dbxIANJLhFnLNkP4UONxmO@f9941","5ekIksD3xDdK9e6ya8kepu@f9941","7dwY2J59VFOJkn/ytSZd+B","a6RC7arGZOL4FuNB81yd04@f9941","c24gCXrRhDhJnStm3G4Kgh@f9941","4aGsULmyhPLqLWyvNVfELc@f9941","bcThKyaiJB7ZopbpOZNr9j@f9941","7203KokU9OlYwXRYWkJzGU@f9941","dcC6HP3ydHLJfxoxMy78gn@f9941","61VNIH+HFI1q3rtJjZ/Yo3@f9941","b1BcAel5RKmoZMk8uQLtRN@f9941","2dCLtUJCRECbPU4x8uTCuh@f9941","086mDyVr9MdIqssdGHEKQl@f9941","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","b4TqwhPJpOv5osY+eFmNjc","7b58+b73lEw7NvdFi0ltiX@f9941","e8v9q5yRpDUIi/QHEWyVH4","ecuz7bzftAm6AnkfNZNjgA","c4WU7Oc5ZE37KJhjLUU5Ik","c8NmJAJmRKCL2PjQD+QSIQ","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","764MzS5VBNMaiP9dbfpxEY","38uYmYiVdA6a6Rabxr/4KI@f9941","e46rC7+fBJTJh0vE5g/mWp@f9941","960lgHkVlMP6BvfY+w/hIL@f9941","6bZ2RlGdtCUbO0qSzblPgm@f9941","3arCxfXzhOVJd3jxGnAnCd"],["node","_spriteFrame","_font","_textureSource","_normalSprite","_target","_parent","root","_hoverSprite","_pressedSprite","_disabledSprite","asset","curve","target","_clip","data","_skeletonData","hotel","time","_particleSystem","curveMax","curveMin","TurnCount","BidName","Hammer","_mainTexture","price","bg","mainTexture","_effectAsset","_cameraComponent","audioTap","popupWarning","popupGift","popupHotelDetails","popupInformation","popupAgreement","popupError","loading","bid","main","scene","PriceDigit","Price","ParticleBid","LogoBid","AuctionBambo","Auction","BestPrice","Background","UserName","Hint","_scrollView","_userDefinedFont","PrefabWinner","PrefabBidding","PrefabProgram","duplicate","thumnail","location","bgBlue","bgPink","information","winner"],["cc.SpriteFrame",["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","_left","_right","_bottom","_top","_alignMode","node","__prefab"],-5,1,4],["cc.Node",["_name","_layer","_id","_active","_objFlags","_components","_parent","_lpos","_children","_prefab","_lscale","_lrot","_euler"],-2,9,1,5,2,4,5,5,5],["cc.Label",["_actualFontSize","_string","_overflow","_isSystemFontUsed","_fontSize","_horizontalAlign","_enableWrapText","_lineHeight","_isBold","_isItalic","_verticalAlign","_isUnderline","node","__prefab","_color","_font"],-9,1,4,5,6],["cc.Node",["_name","_layer","_active","_components","_parent","_lpos","_children","_prefab","_lscale"],0,12,1,5,2,4,5],["cc.Sprite",["_sizeMode","_type","_enabled","node","__prefab","_spriteFrame","_color"],0,1,4,6,5],"cc.ImageAsset",["cc.CurveRange",["mode","multiplier","constantMax","constantMin","constant","curve","curveMin","curveMax"],-2,1,1,1],"cc.Texture2D",["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Keyframe",["time","value","inTangent","outTangent"],-1],["cc.Button",["_transition","_zoomScale","node","__prefab","clickEvents","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],1,1,4,9,5,1,6,6,6,6],["cc.AudioSource",["_playOnAwake","_loop","node","_clip"],1,1,6],["cc.Layout",["_resizeMode","_layoutType","_spacingY","_paddingLeft","_paddingRight","_spacingX","node"],-3,1],["cc.Mask",["_enabled","node","__prefab"],2,1,4],["cc.Node",["_name","_components","_parent","_lpos"],2,2,1,5],["cc.ScrollView",["bounceDuration","brake","vertical","elastic","horizontal","node","__prefab","_content","_verticalScrollBar"],-2,1,4,1,1],["cc.PrefabInfo",["fileId","targetOverrides","root","instance","asset"],2,9,1,4,6],["cc.Camera",["_visibility","_projection","_priority","_orthoHeight","_far","_clearFlags","node","_color"],-3,1,5],["sp.Skeleton",["_preCacheMode","defaultSkin","defaultAnimation","loop","node"],-1,1],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["cc.AudioClip",["_name","_native","_duration"],0],["cc.TTFFont",["_name","_native"],1],["cc.Material",["_techIdx","_states","_defines","_props"],0,12],["cc.SceneAsset",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["cc.BlockInputEvents",["node"],3,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["2df67cPW6dPX48dJVTWAnOy",["node","main","bid","loading","popupError","popupAgreement","popupInformation","popupHotelDetails","popupGift","popupWarning","audioTap"],3,1,1,1,1,1,1,1,1,1,1,1],["88819R1zIVFQawyuDuWo1i2",["node"],3,1],["cc.TargetInfo",["localID"],2],["abe62Rom6RGOZBhSfqtMLHb",["node","TimeDigits","Notifications"],3,1,2,2],["cc.UIMeshRenderer",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo"],2,1,1,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_shadowColor"],3,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.PrefabInstance",["fileId","propertyOverrides"],2,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.ParticleSystem",["startRotation3D","loop","playOnAwake","_capacity","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],-1,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.GradientRange",[],3],["cc.Burst",["repeatInterval","count"],2,4],["cc.ColorOvertimeModule",["color"],3,4],["cc.ShapeModule",["_enable","_shapeType","emitFrom","arcSpeed"],0,4],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["_enable","dampen","limitX","limitY","limitZ","limit"],1,4,4,4,4],["cc.RotationOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.TextureAnimationModule",["_enable","_numTilesX","_numTilesY","cycleCount","randomRow","frameOverTime","startFrame"],-2,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_mainTexture"],3,6],["cc.RichText",["_lineHeight","_string","_fontSize","_isSystemFontUsed","node","__prefab","_font","_userDefinedFont"],-1,1,4,6,6],["418ddTz9+lC7bF5livsSJvo",["node","Auction","AuctionBambo","Infomation","BiddingNode","BiddingContainer","BiddingMore","WinnerNode","WinnerContainer","WinnerMore","ProgramContainer","timeDigits","FloatingItems"],3,1,1,1,1,1,1,1,1,1,1,1,2,2],["cc.EditBox",["_inputMode","_maxLength","node","__prefab","_textLabel","_placeholderLabel"],1,1,4,1,1],["cc.AnimationCurve",["preWrapMode","postWrapMode","keyFrames"],1,9],["cd786OL4KtC4rtPw+E8R6+f",["node","message"],3,1,1],["cc.WebView",["_url","node","__prefab"],2,1,4],["cc.Toggle",["_isChecked","node","__prefab","_normalColor","_target","_checkMark"],2,1,4,5,1,1],["252de94ShdLxLFIQbxXPCxA",["node","WebView","ToggleAgree","LoginMyTour","LoginGoogle","LoginFacebook"],3,1,1,1,1,1,1],["35d6e3+Q9ZO+4eI42f4ic39",["node","WebView"],3,1,1],["82efdr/+I1H77zDUZrAIwdH",["node","Webview"],3,1,1],["ae5e6oHii1DAp8iAq9daOTv",["node","Gift","Confetti","Congratulation","Gift2Turn","Gift4Turn","Voucher","Voucher2Turn","Voucher4Turn","VoucherCode","VoucherDescription"],3,1,1,1,1,1,1,1,1,1,1,1],["9c69ay9pCVG/5YDrJ1oySld",["node"],3,1],["f2b2fXBSjhBZ4KwKnXZ/HX5",["node","icon"],3,1,1],["cc.ScrollBar",["_direction","_enableAutoHide","node","__prefab","_handle"],1,1,4,1],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3],["cc.Prefab",["_name"],2],["29b29DhKDpPx6KKXVpIBp3Z",["node","__prefab","bg","time","hotel","price","duplicate"],3,1,4,1,1,1,1,1],["7b38eim8h9B5ozHT5BG2m7Y",["node","__prefab","bgPink","bgBlue","time","hotel","location","thumnail"],3,1,4,1,1,1,1,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["45db9SjQ7xMLrjPwl8puXSz",["node","__prefab","information"],3,1,4,1],["3559aEckTBCrqIgOqHLWCp2",["node","__prefab","bg","time","winner","price","hotel"],3,1,4,1,1,1,1,1],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9]],[[25,0,2],[9,0,2,1,1],[2,0,1,6,8,5,7,3],[2,0,1,6,5,7,3],[5,3,4,5,1],[9,0,2,1,3,1],[9,0,1,1],[28,0,1,2,3],[2,0,1,6,5,3],[4,0,1,4,3,5,3],[35,0,1,2,2],[7,1],[44,0,1,2,2],[5,1,0,3,4,5,3],[1,0,1,2,8,4],[5,0,3,4,6,5,2],[5,3,5,1],[2,0,1,6,8,5,3],[3,1,0,4,2,3,8,12,13,14,7],[31,0,2],[43,0,1,2,3],[7,0,3,2,4],[4,0,1,4,3,7,5,3],[7,0,2,3],[7,4,2],[11,0,1,2,3,4,5,6,7,8,9,10,3],[3,1,0,4,2,3,8,12,13,15,7],[9,0,2,1],[5,0,3,4,5,2],[1,0,3,4,6,5,1,2,8,8],[17,0,2,3,4,2],[42,0,1,2],[46,1],[2,0,1,6,5,7,10,3],[1,0,3,4,6,5,1,2,7,8,9],[27,0,1],[9,0,1,3,1],[1,0,6,8,3],[1,0,4,6,8,4],[11,0,1,2,3,4,5,6,7,3],[3,1,0,4,7,2,3,12,13,14,15,7],[4,0,2,4,6,3,3],[9,0,1],[5,0,3,4,2],[1,0,6,1,8,4],[1,0,8,2],[11,0,1,2,3,4,5,6,3],[14,1,1],[61,0,1,2,3],[10,1,2],[10,0,2],[21,0,1,2,4],[2,0,1,8,5,7,3],[2,6,9,1],[2,9,1],[4,0,1,4,3,5,8,3],[1,0,1,8,3],[1,0,6,5,1,2,8,6],[1,0,1,2,7,8,5],[1,0,3,4,6,1,8,6],[1,0,3,4,5,1,2,7,8,8],[36,0,1,2,3,2],[7,0,1,5,3],[7,1,2],[73,0,2],[22,0,1,3],[2,0,1,8,5,9,7,3],[4,0,1,4,3,7,3],[5,1,0,3,4,3],[1,0,4,6,5,8,5],[1,0,6,7,8,4],[11,2,3,4,5,6,7,8,9,10,1],[3,1,5,0,4,7,2,3,12,13,14,15,8],[3,1,5,0,4,2,3,12,13,14,15,7],[63,0,1,2,2],[2,0,6,8,5,7,2],[2,0,3,1,6,5,7,4],[2,0,1,8,5,3],[2,0,6,5,7,2],[2,0,1,6,8,5,9,3],[2,0,1,6,5,9,7,3],[4,0,2,1,4,6,3,4],[4,0,1,6,3,5,3],[4,0,2,1,4,3,5,4],[4,0,1,4,3,3],[5,3,6,5,1],[13,0,1,6,3],[1,0,8,9,2],[1,0,4,5,7,8,5],[1,0,5,8,3],[1,0,5,1,2,8,5],[1,0,1,2,8,9,4],[1,0,3,4,5,1,8,9,6],[12,0,2,3,2],[3,1,0,4,2,3,8,12,13,7],[3,1,0,4,2,6,3,8,12,13,8],[3,1,5,0,4,7,2,6,3,12,13,14,9],[3,1,5,0,4,7,2,3,8,12,13,14,9],[33,0,1],[45,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,5],[7,0,5,2],[7,0,2],[7,0,1,6,7,3],[47,0,1,2],[48,0,1],[49,0,1,2,3,4],[50,0,1,2,3,4,2],[51,0,1,2,3,1],[52,0,1,2,1],[53,0,1,2,3,4,5,3],[54,0,1,2,3,2],[55,0,1,2,3,4,5,6,6],[56,0,1,2,3,4,1],[57,0,1],[19,0,1,2,4,4],[72,0,1,2,3,4,5],[23,0,1,2,3,4],[24,0,2],[2,0,1,2,8,5,7,4],[2,0,1,6,8,5,7,10,3],[2,0,1,8,5,7,10,3],[2,0,2,8,5,3],[2,0,3,1,6,8,5,4],[2,0,1,5,7,3],[2,0,4,1,6,5,7,4],[2,0,1,6,5,11,12,3],[2,0,6,8,5,2],[2,0,1,6,5,7,11,10,12,3],[2,0,2,6,5,7,11,12,3],[2,0,3,1,6,5,9,7,4],[2,0,1,6,8,5,9,7,3],[2,0,1,6,5,9,3],[2,0,1,8,5,9,3],[2,0,1,6,5,9,7,11,10,12,3],[4,0,4,6,3,2],[4,0,4,6,3,5,2],[4,0,1,4,6,3,3],[4,0,1,4,6,3,5,3],[4,0,2,1,4,3,4],[4,0,2,1,4,3,7,5,4],[15,0,1,2],[15,0,2,1,3,2],[5,1,0,3,5,3],[5,2,1,0,3,4,6,5,4],[5,1,0,3,4,6,3],[13,0,1,2,6,4],[13,0,1,3,4,5,6,6],[1,0,1,7,8,4],[1,0,3,4,1,2,8,6],[1,0,3,8,3],[1,0,2,7,8,9,4],[1,0,3,4,1,8,5],[1,0,4,2,8,4],[1,0,6,5,8,4],[1,0,3,1,8,4],[1,0,3,4,5,1,2,8,7],[1,0,3,8,9,3],[1,0,4,5,8,9,4],[1,0,3,4,6,5,1,2,8,9,8],[1,0,3,7,8,9,4],[1,0,3,1,2,7,8,9,6],[26,0,1,2,1],[12,2,3,1],[12,1,2,3,2],[12,0,2,2],[11,0,1,2,3,4,3],[14,0,1,2,2],[14,1,2,1],[29,0,1,2,3,4,5,6,7,8,9,10,1],[30,0,1],[32,0,1,2,1],[3,1,0,2,3,12,13,15,5],[3,1,0,4,2,3,8,12,13,14,15,7],[3,1,0,4,2,6,3,12,13,15,7],[3,1,0,2,6,3,8,12,13,15,7],[3,1,5,0,4,2,3,9,12,13,14,15,8],[3,1,0,4,2,3,12,13,14,15,6],[3,1,5,0,4,6,3,12,13,14,7],[3,1,5,0,2,6,3,12,13,7],[3,1,5,0,4,7,2,6,3,9,12,13,14,10],[3,1,0,2,3,12,13,14,5],[3,1,0,4,2,3,12,13,14,6],[3,1,0,4,3,12,13,5],[3,1,0,2,3,8,12,13,14,6],[3,1,5,0,4,7,2,3,12,13,14,8],[3,1,0,4,2,3,12,13,6],[3,1,5,10,0,4,7,2,3,12,13,9],[3,1,5,0,4,2,6,3,12,13,8],[3,5,0,4,2,6,3,12,13,14,7],[3,1,5,0,4,7,2,12,13,14,7],[3,1,5,0,4,7,2,6,3,11,12,13,14,10],[3,1,5,0,4,7,2,6,12,13,14,8],[16,0,1,2,5,6,7,4],[16,0,3,4,5,6,7,8,4],[34,0,1,2,3,2],[17,1,1],[37,0,1,2,3,1],[38,1],[39,0,1],[40,1],[41,1],[58,0,1,2,3,4,5,6,7,5],[18,0,6,7,2],[18,1,2,3,4,5,0,6,7,7],[59,0,1,2,3,4,5,6,7,8,9,10,11,12,1],[19,3,0,1,2,4,5],[60,0,1,2,3,4,5,3],[10,0,1,3],[10,0,2,3],[10,0,1,2,3,5],[10,0,1,2,4],[62,0,1,1],[64,0,1,2,3,4,5,2],[65,0,1,2,3,4,5,1],[66,0,1,1],[67,0,1,1],[68,0,1,2,3,4,5,6,7,8,9,10,1],[69,0,1],[70,0,1,1],[71,0,1,2,3,4,3],[74,0,1,2,3,4,5,6,1],[75,0,1,2,3,4,5,6,7,1],[76,0,1,2,4],[77,0,1,2,1],[78,0,1,2,3,4,5,6,1],[79,0,1],[80,0,1,2],[81,0,2],[82,0,1,2,3],[83,0,1,2],[20,0,2],[20,1,2,0,4]],[[[{"name":"button_info","rect":{"x":293,"y":154,"width":84,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":84},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"cacbuocthamgia_board_blue","rect":{"x":3,"y":445,"width":200,"height":190},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":190},"rotated":false,"capInsets":[60,60,60,60],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"logo_bottom","rect":{"x":3,"y":1257,"width":750,"height":189},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":189},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"auction_bamboo","rect":{"x":1371,"y":1357,"width":266,"height":140},"offset":{"x":0,"y":0},"originalSize":{"width":266,"height":140},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"mainscreen_tophotel_board","rect":{"x":778,"y":1333,"width":587,"height":166},"offset":{"x":0,"y":0},"originalSize":{"width":587,"height":166},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"fmt":"0","w":403,"h":2010}],[6],0,[],[],[]],[[{"base":"2,2,2,2,0,1","mipmaps":["1481fc330"]}],[8],0,[],[],[]],[[{"name":"button_pink_glow","rect":{"x":3,"y":334,"width":218,"height":105},"offset":{"x":0,"y":0},"originalSize":{"width":218,"height":105},"rotated":false,"capInsets":[50,45,50,45],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"fmt":"0","w":2045,"h":2048}],[6],0,[],[],[]],[[{"base":"2,2,2,2,0,1","mipmaps":["1b77d2bd0"]}],[8],0,[],[],[]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["20g1ukYUVPvKWKBRznAKo+"]}],[8],0,[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","packable":true}],[0],0,[0],[3],[42]],[[[51,"gift_open",".mp3",1.512]],0,0,[],[],[]],[[{"name":"main_luotchoi_board","rect":{"x":3,"y":150,"width":196,"height":75},"offset":{"x":0,"y":0},"originalSize":{"width":196,"height":75},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"cacbuocthamgia_inside","rect":{"x":759,"y":759,"width":606,"height":568},"offset":{"x":0,"y":0},"originalSize":{"width":606,"height":568},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"auction_giatotnhat","rect":{"x":244,"y":74,"width":150,"height":74},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":74},"rotated":false,"capInsets":[50,0,50,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"mainscreen_timing_b","rect":{"x":128,"y":695,"width":556,"height":173},"offset":{"x":0,"y":-1},"originalSize":{"width":560,"height":175},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"main_sapdaugia_mytour","rect":{"x":1012,"y":1505,"width":280,"height":423},"offset":{"x":0,"y":0},"originalSize":{"width":280,"height":423},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"name":"auction_bottom_board","rect":{"x":198,"y":1257,"width":750,"height":189},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":189},"rotated":true,"capInsets":[150,120,150,50],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[[65,"helveticaneue","helveticaneue.ttf"]],0,0,[],[],[]],[[{"name":"icon_loading_circle","rect":{"x":1768,"y":1802,"width":237,"height":237},"offset":{"x":0,"y":0},"originalSize":{"width":237,"height":237},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"COIN_MAIN","rect":{"x":80,"y":73,"width":74,"height":71},"offset":{"x":0,"y":0},"originalSize":{"width":74,"height":71},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"quatang_typo","rect":{"x":1734,"y":442,"width":284,"height":243},"offset":{"x":0,"y":0},"originalSize":{"width":284,"height":243},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["54TknWPwVPqJqeCR+Y/Czo"]}],[8],0,[],[],[]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@6c48a","packable":true}],[0],0,[0],[3],[43]],[[{"name":"quatang_base","rect":{"x":3,"y":3,"width":750,"height":1334},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":1334},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"quatang_voucher","rect":{"x":1596,"y":3,"width":446,"height":275},"offset":{"x":0,"y":0},"originalSize":{"width":446,"height":275},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"icon_saleticket","rect":{"x":3,"y":231,"width":196,"height":79},"offset":{"x":0,"y":0},"originalSize":{"width":196,"height":79},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"button_back","rect":{"x":160,"y":73,"width":71,"height":78},"offset":{"x":0,"y":0},"originalSize":{"width":71,"height":78},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"white_128a","rect":{"x":141,"y":3,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"auction_gia","rect":{"x":1883,"y":691,"width":100,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":36},"rotated":false,"capInsets":[30,0,30,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"dangnhap_board_blue","rect":{"x":227,"y":355,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[50,50,50,50],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"button_more_turn","rect":{"x":1734,"y":691,"width":62,"height":66},"offset":{"x":0,"y":0},"originalSize":{"width":62,"height":66},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"COIN_1","rect":{"x":281,"y":3,"width":65,"height":71},"offset":{"x":0,"y":1},"originalSize":{"width":75,"height":75},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"name":"check_1","rect":{"x":3,"y":3,"width":63,"height":63},"offset":{"x":0,"y":0},"originalSize":{"width":63,"height":63},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[[51,"gift_show",".mp3",2.688]],0,0,[],[],[]],[[{"name":"button_close","rect":{"x":205,"y":244,"width":84,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":84},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"icon_bid","rect":{"x":1584,"y":1802,"width":124,"height":178},"offset":{"x":0,"y":0},"originalSize":{"width":124,"height":178},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"base":"2,2,0,0,0,1","mipmaps":["836yr8qLBBH6v4l45wp2l2"]}],[8],0,[],[],[]],[[{"name":"quatang_4","rect":{"x":1643,"y":1357,"width":396,"height":214},"offset":{"x":0,"y":0},"originalSize":{"width":396,"height":214},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["95EkngnxZFbYuFpsqVTaFr"]}],[8],0,[],[],[]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"951249e0-9f16-456d-8b85-a6ca954da16b@6c48a","packable":true}],[0],0,[0],[3],[44]],[[{"name":"mainscreen_tophotel_giachitu100","rect":{"x":1596,"y":442,"width":306,"height":61},"offset":{"x":0,"y":0},"originalSize":{"width":306,"height":61},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"button_auction","rect":{"x":1663,"y":1932,"width":94,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":94,"height":100},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"main_sapdaugia_smallborder","rect":{"x":205,"y":154,"width":82,"height":82},"offset":{"x":0,"y":0},"originalSize":{"width":82,"height":82},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[[116,1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[28,29],[16,45]],[[{"name":"btt_dangnhap_google","rect":{"x":1596,"y":284,"width":445,"height":73},"offset":{"x":0,"y":0},"originalSize":{"width":445,"height":73},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"button_pink","rect":{"x":1012,"y":1934,"width":181,"height":111},"offset":{"x":0,"y":0},"originalSize":{"width":181,"height":111},"rotated":false,"capInsets":[50,30,50,50],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"typo_datgiathanhcong","rect":{"x":778,"y":1505,"width":521,"height":228},"offset":{"x":0,"y":0},"originalSize":{"width":521,"height":228},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[65,"helveticaneuemedium","helveticaneuemedium.ttf"]],0,0,[],[],[]],[[[117,"main"],[52,"content",33554432,[-5,-6,-7,-8,-9,-10,-11,-12,-13],[[5,-1,[0,"99yn0cfL9MmZYfJbPmK9qL"],[5,750,4437],[0,0.5,1]],[15,0,-2,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294953272],194],[145,1,2,20,-3],[56,41,220,-4]],[1,0,667,0]],[118,"Canvas",33554432,"0dDmbhkC9Ftb0hdJwrl+Yu",[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27],[[1,-14,[0,"0dngp/9gNO34wUQjZfN/CX"],[5,750,1334]],[161,-16,[0,"3f2oTdCepERZdpmIfLsrhd"],-15],[87,45,-17,[0,"e8a+bU/8dPDbbJguUzLdoF"]]],[1,375,667,0]],[134,"Main",2,[-31],[[[6,-28,[5,750,1334]],-29,[14,45,100,100,-30]],4,1,4]],[2,"Top",33554432,1,[-34,-35,-36,-37,-38,-39,-40,-41,-42,-43],[[1,-32,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1250]],[147,41,64,1,-33]],[1,0,-625,0]],[135,"Bid",2,[-47,-48,-49,-50,-51],[[[6,-44,[5,750,1334]],[57,45,-1334,1334,750,1334,-45],-46],4,4,1],[1,0,1334,0]],[81,"PopupGift",false,33554432,2,[-56,-57,-58,-59,-60],[[[6,-52,[5,750,1334]],[58,45,100,100,0,-53],-54,[162,-55,110]],4,4,1,4]],[2,"Bottom",33554432,5,[-63,-64,-65,-66,-67,-68,-69,-70],[[5,-61,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,560],[0,0.5,0]],[56,4,750,-62]],[1,0,-667,0]],[119,"Time",33554432,7,[-73,-74,-75,-76,-77,-78,-79,-80],[[6,-71,[5,1071.4285714285716,250]],[37,41,10.5,-72]],[1,0,462,0],[1,0.7,0.7,0.7]],[2,"Time",33554432,4,[-83,-84,-85,-86,-87,-88,-89,-90],[[6,-81,[5,750,250]],[37,41,800,-82]],[1,0,-300,0]],[41,"PopupAgreement",false,2,[-94,-95,-96,-97],[[[6,-91,[5,750,1334]],[58,45,100,100,0,-92],-93],4,4,1]],[52,"Voucher",33554432,[-100,-101,-102,-103,-104,-105],[[1,-98,[0,"f7NISe7HdAD68SLfhnddy8"],[5,446,275]],[4,-99,[0,"e71ctEmpxFC4KlSYRZNz/a"],106]],[1,0,-130,0]],[41,"PopupWarning",false,2,[-109,-110,-111,-112],[[[6,-106,[5,750,1334]],[14,45,100,100,-107],-108],4,4,1]],[17,"Floating",33554432,4,[-114,-115,-116,-117,-118,-119,-120,-121],[[42,-113]]],[140,"Tap",[-122]],[41,"PopupError",false,2,[-126,-127,-128,-129],[[[6,-123,[5,750,1334]],[14,45,100,100,-124],-125],4,4,1]],[17,"Border",33554432,10,[-133,-134,-135,-136,-137],[[1,-130,[0,"f7NISe7HdAD68SLfhnddy8"],[5,700,790]],[13,1,0,-131,[0,"e71ctEmpxFC4KlSYRZNz/a"],61],[29,18,275,275,572,572,200,190,-132]]],[41,"PopupInformation",false,2,[-141,-142,-143,-144],[[[6,-138,[5,750,1334]],[58,45,100,100,0,-139],-140],4,4,1]],[41,"PopupHotelDetails",false,2,[-148,-149,-150,-151],[[[6,-145,[5,750,1334]],[58,45,100,100,0,-146],-147],4,4,1]],[2,"Bidding",33554432,1,[-155,-156,-157,-158],[[5,-152,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,600],[0,0.5,1]],[15,0,-153,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294953272],183],[44,41,3008,64,-154]],[1,0,-3008,0]],[2,"Winner",33554432,1,[-162,-163,-164,-165],[[5,-159,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,600],[0,0.5,1]],[15,0,-160,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294953272],192],[44,41,3628,64,-161]],[1,0,-3628,0]],[82,"EditBox",33554432,[-170,-171,-172],[[[1,-166,[0,"1fhJOVuOVAGYSYZoiE25Uz"],[5,455,110]],[68,1,0,-167,[0,"43qH95z3VGeYelCElKd6FW"]],-168,[148,45,15,150,160,40,-169]],4,4,1,4],[1,-67.5,0,0]],[17,"Congratulation",33554432,6,[-174,-175,-176,11,-177],[[42,-173]]],[81,"Loading",false,33554432,2,[-182,-183,-184],[[[6,-178,[5,750,1334]],[35,-179],[14,45,100,100,-180],-181],4,4,4,1]],[2,"NextPrograms",33554432,1,[-188,-189,-190,-191],[[5,-185,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,537],[0,0.5,1]],[15,0,-186,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294953272],165],[44,41,1550,64,-187]],[1,0,-1550,0]],[2,"Button",33554432,19,[-197],[[1,-192,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,120,120]],[68,1,0,-193,[0,"77BcV1zfNHo4LI4KRqZupe"]],[46,3,0.9,-195,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","ExpandBidding",3]],[4,4292269782],-194],[88,36,50,40,1,-196]],[1,265,-500,0]],[2,"Button",33554432,20,[-203],[[1,-198,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,120,120]],[68,1,0,-199,[0,"77BcV1zfNHo4LI4KRqZupe"]],[46,3,0.9,-201,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","ExpandBidding",3]],[4,4292269782],-200],[88,36,50,40,1,-202]],[1,265,-500,0]],[120,"Turns",33554432,[-207,-208,-209],[[1,-204,[0,"f7NISe7HdAD68SLfhnddy8"],[5,196,75]],[4,-205,[0,"e71ctEmpxFC4KlSYRZNz/a"],11],[38,33,50,50,-206]],[1,256.4,590.75,0],[1,0.7,0.7,0.7]],[82,"Toggle",33554432,[-214],[[[1,-210,[0,"a7yxb8GDhNnIT24rnD3lO4"],[5,62,62]],[28,0,-211,[0,"3a4GKzsKZCNLuWHErVRJ1B"],55],-212,[149,8,50,-213]],4,4,1,4],[1,-269,0,0]],[136,"ScrollView",33554432,3,[-219,-220],[[[1,-215,[0,"71kmounFRG/K27WWBbH2RB"],[5,750,1334]],[13,1,0,-216,[0,"8ce2Xg/B9GhY0DNafD/vxa"],196],-217,[14,45,240,250,-218]],4,4,1,4]],[2,"Play",33554432,4,[-226],[[1,-221,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,690,111]],[13,1,0,-222,[0,"77BcV1zfNHo4LI4KRqZupe"],148],[39,3,0.9,-224,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","Play",3]],[4,4292269782],-223,149],[37,1,1100,-225]],[1,0,-530.5,0]],[2,"Rule",33554432,1,[-230,-231,-232],[[5,-227,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,815],[0,0.5,1]],[15,0,-228,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294953272],174],[56,40,64,-229]],[1,0,-2173,0]],[2,"Content",33554432,31,[-235,-236,-237,-238],[[5,-233,[0,"f7NISe7HdAD68SLfhnddy8"],[5,606,568],[0,0.5,1]],[4,-234,[0,"e71ctEmpxFC4KlSYRZNz/a"],173]],[1,0,-100,0]],[52,"content",33554432,[-243],[[36,-239,[5,670,94],[0,0.5,1]],[47,-240],[86,1,2,-241],[57,41,100,150,100,100,-242]],[1,0,-100,0]],[121,"GameMgr","cfnugoLNRBn4krmo0no0Tq",[-256],[[168,-254,-253,-252,-251,-250,-249,-248,-247,-246,-245,-244],[169,-255]]],[17,"Mask",33554432,5,[-260,-261],[[6,-257,[5,750,1334]],[47,-258],[14,45,100,100,-259]]],[17,"Top",33554432,5,[-264,-265,27],[[1,-262,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[56,41,64,-263]]],[2,"Back",33554432,36,[-270],[[27,-266,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[39,3,0.9,-268,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"abe62Rom6RGOZBhSfqtMLHb","Back",5]],[4,4292269782],-267,4],[59,9,25,25,25,100,-269]],[1,-300,592,0]],[2,"BestPrice",33554432,7,[-273,-274,-275],[[1,-271,[0,"f7NISe7HdAD68SLfhnddy8"],[5,600,74]],[13,1,0,-272,[0,"e71ctEmpxFC4KlSYRZNz/a"],15]],[1,0,325,0]],[75,"Notification",7,[-277,-278,-279,-280],[[42,-276]],[1,0,750,0]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[2,"Auction",33554432,7,[-282,-283,-284,-285],[[1,-281,[0,"f7NISe7HdAD68SLfhnddy8"],[5,587,166]]],[1,0,557,0]],[170,5,[-290,-291,-292,-293,-294,-295],[-286,-287,-288,-289]],[2,"ButtonClose",33554432,15,[-300],[[27,-296,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[25,3,0.9,-298,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"cd786OL4KtC4rtPw+E8R6+f","Close",15],[7,"cc.AudioSource","play",14]],[4,4292269782],-297,49,50,51,52],[38,33,25,25,-299]],[1,300,592,0]],[9,"LoginMyTour",33554432,16,[[[1,-301,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,445,91]],[13,1,0,-302,[0,"77BcV1zfNHo4LI4KRqZupe"],58],-303,[69,20,25,25,80,-304]],4,4,1,4],[1,0,-269.5,0]],[9,"LoginMyGoogle",33554432,16,[[[1,-305,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,445,73]],[13,1,0,-306,[0,"77BcV1zfNHo4LI4KRqZupe"],59],-307,[69,20,25,25,120,-308]],4,4,1,4],[1,0,-238.5,0]],[9,"LoginMyFacebook",33554432,16,[[[1,-309,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,445,73]],[13,1,0,-310,[0,"77BcV1zfNHo4LI4KRqZupe"],60],-311,[69,20,25,25,40,-312]],4,4,1,4],[1,0,-318.5,0]],[2,"ButtonClose",33554432,10,[-317],[[27,-313,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[25,3,0.9,-315,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"252de94ShdLxLFIQbxXPCxA","Close",10],[7,"cc.AudioSource","play",14]],[4,4292269782],-314,65,66,67,68],[38,33,25,25,-316]],[1,300,592,0]],[2,"ButtonClose",33554432,17,[-322],[[27,-318,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[25,3,0.9,-320,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"35d6e3+Q9ZO+4eI42f4ic39","Close",17],[7,"cc.AudioSource","play",14]],[4,4292269782],-319,75,76,77,78],[38,33,25,25,-321]],[1,300,592,0]],[2,"ButtonClose",33554432,18,[-327],[[27,-323,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[25,3,0.9,-325,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"82efdr/+I1H77zDUZrAIwdH","Close",18],[7,"cc.AudioSource","play",14]],[4,4292269782],-324,85,86,87,88],[38,33,25,25,-326]],[1,300,592,0]],[17,"Button",33554432,6,[-332],[[1,-328,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,750,750]],[71,-330,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"ae5e6oHii1DAp8iAq9daOTv","OpenGift",6]],[4,4292269782],-329,92,93,94,95],[89,4,292,-331]]],[2,"Button",33554432,11,[-337],[[1,-333,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,218,105]],[13,1,0,-334,[0,"77BcV1zfNHo4LI4KRqZupe"],104],[39,3,0.9,-336,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"ae5e6oHii1DAp8iAq9daOTv","Close",6],[7,"cc.AudioSource","play",14]],[4,4292269782],-335,105]],[1,0,-90,0]],[17,"Border",33554432,12,[-341,-342],[[1,-338,[0,"f7NISe7HdAD68SLfhnddy8"],[5,694,770]],[13,1,0,-339,[0,"e71ctEmpxFC4KlSYRZNz/a"],114],[29,18,275,275,572,572,200,190,-340]]],[2,"ButtonDownload",33554432,12,[-347],[[1,-343,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,300,130]],[142,1,0,-344,116],[39,3,0.9,-346,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"9c69ay9pCVG/5YDrJ1oySld","Download",12],[7,"cc.AudioSource","play",14]],[4,4292269782],-345,117]],[1,0,-310,0]],[2,"ButtonClose",33554432,12,[-352],[[27,-348,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[25,3,0.9,-350,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"9c69ay9pCVG/5YDrJ1oySld","Close",12],[7,"cc.AudioSource","play",14]],[4,4292269782],-349,119,120,121,122],[38,33,25,25,-351]],[1,300,592,0]],[2,"Auction",33554432,4,[-355,-356,-357],[[1,-353,[0,"f7NISe7HdAD68SLfhnddy8"],[5,587,166]],[70,1,562,1,-354]],[1,0,-20,0]],[122,"AuctionBambo",false,33554432,58,[-361],[[1,-358,[0,"f7NISe7HdAD68SLfhnddy8"],[5,587,166]],[4,-359,[0,"e71ctEmpxFC4KlSYRZNz/a"],139],[45,1,-360]]],[2,"Close",33554432,4,[-366],[[27,-362,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[39,3,0.9,-364,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","Exit",3]],[4,4292269782],-363,151],[59,9,25,25,25,100,-365]],[1,-300,550,0]],[2,"Info",33554432,4,[-371],[[27,-367,[0,"98TYGMtwRBTYZZn4EZmhzJ"]],[39,3,0.9,-369,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","Info",3]],[4,4292269782],-368,153],[59,33,25,25,25,100,-370]],[1,300,550,0]],[2,"Users",33554432,1,[-374,-375],[[6,-372,[5,750,140]],[37,41,1270,-373]],[1,0,-1340,0]],[2,"Turns",33554432,62,[-378,-379,-380],[[1,-376,[0,"f7NISe7HdAD68SLfhnddy8"],[5,196,75]],[4,-377,[0,"e71ctEmpxFC4KlSYRZNz/a"],160]],[1,0,-42,0]],[123,"content",33554432,[[1,-381,[0,"99yn0cfL9MmZYfJbPmK9qL"],[5,340,400]],[146,1,1,30,30,30,-382],[29,13,-10,650,91.5,45.5,220,400,-383]],[1,160,-23,0]],[52,"content",33554432,[-387],[[36,-384,[5,670,94],[0,0.5,1]],[86,1,2,-385],[57,41,100,150,100,100,-386]],[1,0,-100,0]],[137,"scrollBar",33554432,29,[-392],[[[5,-388,[0,"17lQPXOPpO0b6Z/3qQRAz3"],[5,12,1334],[0,1,0.5]],[143,false,1,0,-389,[0,"9dLJe/n0BKVoGauB1wT/Tc"],[4,0],195],[150,37,250,1,-390,[0,"88/VBmjEBOMLWb2cOiN0kU"]],-391],4,4,4,1],[1,375,0,0]],[2,"More",33554432,27,[-396],[[1,-393,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,150,150]],[25,3,0.9,-395,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","Share",3]],[4,4292269782],-394,7,8,9,10]],[1,100,0,0]],[2,"BestPriceMask",33554432,38,[-400],[[5,-397,[0,"c68UOAlNhN171Umca6yVvF"],[5,505,30],[0,0,0.5]],[47,-398],[151,40,70,25,277.76,-399]],[1,-230,-15,0]],[17,"Auction",33554432,44,[-403],[[1,-401,[0,"f7NISe7HdAD68SLfhnddy8"],[5,587,166]],[4,-402,[0,"e71ctEmpxFC4KlSYRZNz/a"],21]]],[17,"AuctionBambo",33554432,44,[-406],[[1,-404,[0,"f7NISe7HdAD68SLfhnddy8"],[5,587,166]],[4,-405,[0,"e71ctEmpxFC4KlSYRZNz/a"],23]]],[2,"Info",33554432,44,[-410],[[1,-407,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,150,150]],[25,3,0.9,-409,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"abe62Rom6RGOZBhSfqtMLHb","Info",5]],[4,4292269782],-408,25,26,27,28]],[1,235,-12,0]],[2,"Border",33554432,7,[-413,-414],[[1,-411,[0,"f7NISe7HdAD68SLfhnddy8"],[5,690,220]],[13,1,0,-412,[0,"e71ctEmpxFC4KlSYRZNz/a"],34]],[1,0,150,0]],[76,"MULTIPLY",false,33554432,21,[[1,-415,[0,"c68UOAlNhN171Umca6yVvF"],[5,50,110]],[171,"00",40,1,false,-416,[0,"2frm37uaJHQr0AEEaYyM82"],32],[152,37,-50,110,-417]],[1,252.5,0,0]],[2,"Bid",33554432,7,[-421],[[1,-418,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,150,150]],[25,3,0.9,-420,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"abe62Rom6RGOZBhSfqtMLHb","Bid",5]],[4,4292269782],-419,36,37,38,39]],[1,258,132,0]],[55,"BidParticle",33554432,5,[[[42,-422],-423,[98,-424],[93,false,-425,43]],4,1,4,4],[1,0,245,0],[1,30,30,30]],[8,"Overlay",33554432,15,[[1,-426,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-427,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,3355443200],44],[35,-428],[14,45,20,20,-429]]],[17,"Border",33554432,15,[-433],[[1,-430,[0,"f7NISe7HdAD68SLfhnddy8"],[5,700,450]],[13,1,0,-431,[0,"e71ctEmpxFC4KlSYRZNz/a"],45],[29,18,275,275,572,572,200,190,-432]]],[8,"Overlay",33554432,10,[[1,-434,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-435,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,3355443200],53],[35,-436],[14,45,20,20,-437]]],[2,"Bg",33554432,16,[-441],[[1,-438,[0,"f7NISe7HdAD68SLfhnddy8"],[5,660,410]],[13,1,0,-439,[0,"e71ctEmpxFC4KlSYRZNz/a"],54],[29,45,20,20,80,300,128,128,-440]],[1,0,110,0]],[75,"ToggleAgree",16,[28,-444],[[6,-442,[5,700,0]],[153,44,667,250,-443]],[1,0,-145,0]],[8,"Overlay",33554432,17,[[1,-445,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-446,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,3355443200],69],[35,-447],[14,45,20,20,-448]]],[2,"Border",33554432,17,[-452],[[1,-449,[0,"f7NISe7HdAD68SLfhnddy8"],[5,700,1064]],[13,1,0,-450,[0,"e71ctEmpxFC4KlSYRZNz/a"],71],[29,45,25,25,200,70,700,100,-451]],[1,0,-65,0]],[2,"Bg",33554432,82,[-456],[[1,-453,[0,"f7NISe7HdAD68SLfhnddy8"],[5,660,934]],[13,1,0,-454,[0,"e71ctEmpxFC4KlSYRZNz/a"],70],[34,45,20,20,80,50,128,128,1,-455]],[1,0,-15,0]],[2,"Title",33554432,17,[-460],[[1,-457,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-458,[0,"e71ctEmpxFC4KlSYRZNz/a"],73],[70,1,80,1,-459]],[1,0,503,0]],[8,"Overlay",33554432,18,[[1,-461,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-462,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,3355443200],79],[35,-463],[14,45,20,20,-464]]],[2,"Border",33554432,18,[-468],[[1,-465,[0,"f7NISe7HdAD68SLfhnddy8"],[5,700,1064]],[13,1,0,-466,[0,"e71ctEmpxFC4KlSYRZNz/a"],81],[29,45,25,25,200,70,700,100,-467]],[1,0,-65,0]],[2,"Bg",33554432,86,[-472],[[1,-469,[0,"f7NISe7HdAD68SLfhnddy8"],[5,660,934]],[13,1,0,-470,[0,"e71ctEmpxFC4KlSYRZNz/a"],80],[34,45,20,20,80,50,128,128,1,-471]],[1,0,-15,0]],[2,"Title",33554432,18,[-476],[[1,-473,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-474,[0,"e71ctEmpxFC4KlSYRZNz/a"],83],[70,1,80,1,-475]],[1,0,503,0]],[8,"Overlay",33554432,6,[[1,-477,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-478,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,3355443200],89],[35,-479],[14,45,20,20,-480]]],[55,"Particle",33554432,22,[[[42,-481],-482,[98,-483],[93,false,-484,109]],4,1,4,4],[1,0,-80,0],[1,30,30,30]],[8,"Overlay",33554432,12,[[1,-485,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-486,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,3355443200],111],[35,-487],[14,45,20,20,-488]]],[17,"view",33554432,29,[1],[[1,-489,[0,"adVJjE6iNG9YcIKwDKe/zq"],[5,750,1334]],[166,false,-490,[0,"4eIg29oQZFVLk+NZnwDdlk"]],[14,45,240,250,-491]]],[17,"Auction",33554432,58,[-494],[[1,-492,[0,"f7NISe7HdAD68SLfhnddy8"],[5,587,166]],[4,-493,[0,"e71ctEmpxFC4KlSYRZNz/a"],137]]],[2,"Hammer",33554432,4,[-498],[[1,-495,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,500,400]],[71,-497,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","Deal",3]],[4,4292269782],-496,140,141,142,143]],[1,0,60,0]],[2,"Hint",33554432,4,[-502],[[1,-499,[0,"f7NISe7HdAD68SLfhnddy8"],[5,600,80]],[13,1,0,-500,[0,"e71ctEmpxFC4KlSYRZNz/a"],144],[59,41,75,75,755,100,-501]],[1,0,-170,0]],[2,"More",33554432,63,[-506],[[1,-503,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,150,150]],[25,3,0.9,-505,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"418ddTz9+lC7bF5livsSJvo","Share",3]],[4,4292269782],-504,156,157,158,159]],[1,100,0,0]],[2,"ScrollView",33554432,24,[-510],[[5,-507,[0,"71kmounFRG/K27WWBbH2RB"],[5,750,537],[0,0,0.5]],[192,0.23,0.75,false,-508,[0,"a8UaPDxYhIX5MrqvKGMJdR"],64],[14,45,240,250,-509]],[1,-375,-268.5,0]],[17,"view",33554432,97,[64],[[5,-511,[0,"adVJjE6iNG9YcIKwDKe/zq"],[5,750,537],[0,0,0.5]],[167,-512,[0,"4eIg29oQZFVLk+NZnwDdlk"]],[14,13,750,250,-513]]],[17,"view",33554432,19,[65],[[36,-514,[5,670,456],[0,0.5,1]],[47,-515],[60,45,40,40,144,100,100,1,-516]]],[77,"Container",33554432,[-518,-519,-520],[[1,-517,[0,"3242DVCWtMepBNxixN/wo6"],[5,650,94]]]],[17,"view",33554432,20,[33],[[36,-521,[5,670,456],[0,0.5,1]],[47,-522],[60,45,40,40,144,100,100,1,-523]]],[77,"Container",33554432,[-525,-526,-527],[[1,-524,[0,"3242DVCWtMepBNxixN/wo6"],[5,660,94]]]],[194,"main",[-532,34,2],[195,[[61,["notifications","1"],45,-528,[19,["e71ctEmpxFC4KlSYRZNz/a"]]],[61,["notifications","2"],45,-529,[19,["e71ctEmpxFC4KlSYRZNz/a"]]],[61,["notifications","3"],45,-530,[19,["e71ctEmpxFC4KlSYRZNz/a"]]],[61,["notifications","4"],45,-531,[19,["e71ctEmpxFC4KlSYRZNz/a"]]]]],[196,[197],[198,[4,4283190348]],[199],[200]]],[3,"Bg",33554432,35,[[5,-533,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334],[0,0.5,1]],[15,0,-534,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294953272],1],[14,45,750,1200,-535]],[1,0,667,0]],[83,"Hotel",false,33554432,35,[[[5,-536,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1200],[0,0.5,1]],-537,[45,1,-538]],4,1,4],[1,0,667,0]],[33,"Logo",33554432,36,[[1,-539,[0,"f7NISe7HdAD68SLfhnddy8"],[5,653,418]],[4,-540,[0,"e71ctEmpxFC4KlSYRZNz/a"],2],[37,1,50,-541]],[1,0,522.95,0],[1,0.45,0.45,0.45]],[3,"Bg",33554432,7,[[1,-542,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,560]],[13,1,0,-543,[0,"e71ctEmpxFC4KlSYRZNz/a"],12],[14,45,750,189,-544]],[1,0,280,0]],[3,"Label",33554432,38,[[1,-545,[0,"c68UOAlNhN171Umca6yVvF"],[5,550,50.4]],[172,"GIÁ TỐT NHẤT HIÊN TẠI",22,22,1,false,true,-546,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4280690989],14],[154,40,50,249.83,-547]],[1,25,15,0]],[2,"TextBoxBg",33554432,72,[21],[[1,-548,[0,"f7NISe7HdAD68SLfhnddy8"],[5,620,110]],[13,1,0,-549,[0,"e71ctEmpxFC4KlSYRZNz/a"],33]],[1,0,-20,0]],[76,"BidEffect",false,33554432,5,[[1,-550,[0,"f7NISe7HdAD68SLfhnddy8"],[5,521,228]],[28,0,-551,[0,"e71ctEmpxFC4KlSYRZNz/a"],40]],[1,0,220,0]],[84,"Message",33554432,77,[[[1,-552,[0,"c68UOAlNhN171Umca6yVvF"],[5,640,390]],-553,[34,45,30,30,30,30,600,500,1,-554]],4,1,4]],[2,"Title",33554432,15,[-557],[[1,-555,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-556,[0,"e71ctEmpxFC4KlSYRZNz/a"],47]],[1,0,270,0]],[9,"WebView",33554432,79,[[[5,-558,[0,"a1D+jicHZPDJe8HsX34jia"],[5,650,400],[0,0.5,1]],-559,[29,45,5,5,5,5,680,395,-560]],4,1,4],[1,0,200,0]],[2,"Title",33554432,10,[-563],[[1,-561,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-562,[0,"e71ctEmpxFC4KlSYRZNz/a"],63]],[1,0,430,0]],[9,"WebView",33554432,83,[[[5,-564,[0,"a1D+jicHZPDJe8HsX34jia"],[5,650,924],[0,0.5,1]],-565,[34,45,5,5,5,5,680,395,1,-566]],4,1,4],[1,0,462,0]],[9,"WebView",33554432,87,[[[5,-567,[0,"a1D+jicHZPDJe8HsX34jia"],[5,650,924],[0,0.5,1]],-568,[34,45,5,5,5,5,680,395,1,-569]],4,1,4],[1,0,462,0]],[8,"Bg",33554432,6,[[1,-570,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[4,-571,[0,"e71ctEmpxFC4KlSYRZNz/a"],90],[45,4,-572]]],[33,"Logo",33554432,6,[[1,-573,[0,"f7NISe7HdAD68SLfhnddy8"],[5,284,243]],[4,-574,[0,"e71ctEmpxFC4KlSYRZNz/a"],91],[37,1,70,-575]],[1,10,451.20000000000005,0],[1,1.2,1.2,1.2]],[55,"Gift",33554432,53,[[[6,-576,[5,512.32,512.32]],-577,[89,4,-993.48,-578]],4,1,4],[1,0,-600,0],[1,3,3,3]],[2,"Title",33554432,22,[-581],[[1,-579,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-580,[0,"e71ctEmpxFC4KlSYRZNz/a"],97]],[1,0,257,0]],[3,"Turn2",33554432,22,[[6,-582,[5,393,219]],[16,-583,98]],[1,0,-90,0]],[3,"Turn4",33554432,22,[[6,-584,[5,396,214]],[16,-585,99]],[1,0,-90,0]],[33,"Turn2",33554432,11,[[6,-586,[5,393,219]],[16,-587,100]],[1,0,150,0],[1,0.8,0.8,0.8]],[33,"Turn4",33554432,11,[[6,-588,[5,396,214]],[16,-589,101]],[1,0,150,0],[1,0.8,0.8,0.8]],[124,"Label",512,33554432,54,[[1,-590,[0,"07QMd0h1dLcYd/vjigaip6"],[5,218,100]],[173,"Copy mã",30,30,1,false,false,-591,[0,"ee3IZdy2dLIaAWpjI7P0FL"],103],[90,45,5,100,40,-592]],[1,0,2.5,0]],[3,"Website",33554432,55,[[1,-593,[0,"c68UOAlNhN171Umca6yVvF"],[5,250,200]],[40,"Tặng 2 lượt đấu giá khi chơi qua website mytour.vn",25,25,30,1,false,-594,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281150765],112],[34,45,62,382,395,175,600,500,1,-595]],[1,-160,-110,0]],[3,"App",33554432,55,[[1,-596,[0,"c68UOAlNhN171Umca6yVvF"],[5,250,200]],[40,"Gấp đôi lượt chơi và nhận mã khuyến mãi giá trị khi chơi qua\nứng dụng Mytour",25,25,30,1,false,-597,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281150765],113],[34,45,382,62,395,175,600,500,1,-598]],[1,160,-110,0]],[3,"Label",33554432,56,[[1,-599,[0,"c68UOAlNhN171Umca6yVvF"],[5,350,127]],[26,"Tải Mytour ngay",30,30,1,false,true,-600,[0,"2frm37uaJHQr0AEEaYyM82"],115],[155,45,-25,-25,3,143.39,50.4,-601]],[1,0,1.5,0]],[8,"Overlay",33554432,23,[[1,-602,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[15,0,-603,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,1677721600],123],[14,45,20,20,-604]]],[125,"icon_loading_circle",33554432,23,[[6,-605,[5,237,237]],[16,-606,125]],[3,0,0,-0.014865468879310317,0.999889502812685],[1,0,0,-1.7035199997201562]],[3,"Background",33554432,4,[[1,-607,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,812]],[4,-608,[0,"e71ctEmpxFC4KlSYRZNz/a"],126],[45,1,-609]],[1,0,219,0]],[3,"Coin",33554432,13,[[6,-610,[5,74,71]],[16,-611,127]],[1,-310,380,0]],[3,"Coin-001",33554432,13,[[6,-612,[5,65,71]],[16,-613,128]],[1,-211.715,210.459,0]],[3,"Coin-002",33554432,13,[[6,-614,[5,45,71]],[16,-615,129]],[1,268.825,68.786,0]],[3,"Coin-003",33554432,13,[[6,-616,[5,65,71]],[16,-617,130]],[1,310.945,262.151,0]],[33,"Coin-004",33554432,13,[[6,-618,[5,74,71]],[85,-619,[4,3238002687],131]],[1,234.365,283.21,0],[1,0.75,0.75,0.75]],[33,"Coin-005",33554432,13,[[6,-620,[5,65,71]],[85,-621,[4,3238002687],132]],[1,171.186,472.746,0],[1,0.75,0.75,0.75]],[3,"icon_saleticket",33554432,13,[[6,-622,[5,196,79]],[16,-623,133]],[1,-327.31,138.818,0]],[3,"icon_bid",33554432,13,[[6,-624,[5,124,178]],[16,-625,134]],[1,356.098,93.811,0]],[3,"Logo",33554432,4,[[1,-626,[0,"f7NISe7HdAD68SLfhnddy8"],[5,653,418]],[4,-627,[0,"e71ctEmpxFC4KlSYRZNz/a"],135],[45,1,-628]],[1,0,416,0]],[3,"Label",33554432,30,[[1,-629,[0,"07QMd0h1dLcYd/vjigaip6"],[5,690,96]],[174,"Đấu Giá Ngay",40,1,false,false,true,-630,[0,"ee3IZdy2dLIaAWpjI7P0FL"],147],[90,45,15,100,40,-631]],[1,0,7.5,0]],[3,"Bg",33554432,24,[[1,-632,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,537]],[15,0,-633,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4293693733],161],[14,45,40,36,-634]],[1,0,-268.5,0]],[3,"Bg",33554432,24,[[1,-635,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,527]],[15,0,-636,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294354250],162],[57,45,5,5,40,36,-637]],[1,0,-268.5,0]],[2,"Title",33554432,24,[-640],[[1,-638,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-639,[0,"e71ctEmpxFC4KlSYRZNz/a"],164]],[1,0,30,0]],[2,"Title",33554432,31,[-643],[[1,-641,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-642,[0,"e71ctEmpxFC4KlSYRZNz/a"],168]],[1,0,-10,0]],[8,"Border",33554432,19,[[5,-644,[0,"f7NISe7HdAD68SLfhnddy8"],[5,690,500],[0,0.5,1]],[13,1,0,-645,[0,"e71ctEmpxFC4KlSYRZNz/a"],175],[60,45,30,30,100,690,800,1,-646]]],[2,"Title",33554432,19,[-649],[[1,-647,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-648,[0,"e71ctEmpxFC4KlSYRZNz/a"],177]],[1,0,22,0]],[2,"Header",33554432,65,[-651,100],[[1,-650,[0,"6a606hNzlLpqqTAXDGFzGt"],[5,670,94]]],[1,0,-47,0]],[8,"Border",33554432,20,[[5,-652,[0,"f7NISe7HdAD68SLfhnddy8"],[5,690,500],[0,0.5,1]],[13,1,0,-653,[0,"e71ctEmpxFC4KlSYRZNz/a"],184],[60,45,30,30,100,690,800,1,-654]]],[2,"Title",33554432,20,[-657],[[1,-655,[0,"f7NISe7HdAD68SLfhnddy8"],[5,638,168]],[4,-656,[0,"e71ctEmpxFC4KlSYRZNz/a"],186]],[1,0,22,0]],[2,"Header",33554432,33,[-659,102],[[1,-658,[0,"6a606hNzlLpqqTAXDGFzGt"],[5,670,94]]],[1,0,-47,0]],[3,"Time",33554432,102,[[5,-660,[0,"c68UOAlNhN171Umca6yVvF"],[5,100,94],[0,0,0.5]],[72,"Phiên",0,25,25,30,1,false,-661,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380],188],[156,8,20,-662,[0,"76P+K5zndN1ppeFGoea51Q"]]],[1,-310,0,0]],[126,"Audios",34,[14],[[163,true,-663,0]]],[8,"Icon",33554432,37,[[1,-664,[0,"f7NISe7HdAD68SLfhnddy8"],[5,71,78]],[4,-665,[0,"e71ctEmpxFC4KlSYRZNz/a"],3]]],[3,"Coin",33554432,27,[[1,-666,[0,"f7NISe7HdAD68SLfhnddy8"],[5,90,90]],[28,0,-667,[0,"e71ctEmpxFC4KlSYRZNz/a"],5]],[1,-90,0,0]],[9,"Turn",33554432,27,[[[1,-668,[0,"c68UOAlNhN171Umca6yVvF"],[5,100,50]],-669],4,1],[1,10,2,0]],[8,"Icon",33554432,67,[[1,-670,[0,"f7NISe7HdAD68SLfhnddy8"],[5,62,66]],[4,-671,[0,"e71ctEmpxFC4KlSYRZNz/a"],6]]],[127,"Icon",33554432,38,[[1,-672,[0,"f7NISe7HdAD68SLfhnddy8"],[5,124,178]],[4,-673,[0,"e71ctEmpxFC4KlSYRZNz/a"],13]],[1,-250,21.102,0],[3,0,0,-0.49999999999999994,0.8660254037844387],[1,0.6,0.6,0.6],[1,0,0,-60]],[9,"BestPrice",33554432,68,[[[5,-674,[0,"c68UOAlNhN171Umca6yVvF"],[5,283.32,50.4],[0,0,0.5]],-675],4,1],[1,110.84,0,0]],[53,39,[30,"7aFiDHn+NClKHPLQ2dj3zj",-676,[31,"326+nkc0hO36x0TSXjkFcL",[[20,"ItemNotification",["name"],40],[12,["position"],40,[1,0,120,0]],[12,["rotation"],40,[3,0,0,0,1]],[20,"ItemNotification",["_name"],40],[12,["_lpos"],40,[1,0,120,0]],[12,["_lrot"],40,[3,0,0,0,1]]]],16]],[53,39,[30,"7aFiDHn+NClKHPLQ2dj3zj",-677,[31,"69Qvi4tOZGkZcPQ4lkWdQ1",[[20,"ItemNotification",["name"],41],[12,["position"],41,[1,0,80,0]],[12,["rotation"],41,[3,0,0,0,1]],[20,"ItemNotification",["_name"],41],[12,["_lpos"],41,[1,0,80,0]],[12,["_lrot"],41,[3,0,0,0,1]]]],17]],[53,39,[30,"7aFiDHn+NClKHPLQ2dj3zj",-678,[31,"d4nlBWj2hLWK7bsk3BLsoA",[[20,"ItemNotification",["name"],42],[12,["position"],42,[1,0,40,0]],[12,["rotation"],42,[3,0,0,0,1]],[20,"ItemNotification",["_name"],42],[12,["_lpos"],42,[1,0,40,0]],[12,["_lrot"],42,[3,0,0,0,1]]]],18]],[53,39,[30,"7aFiDHn+NClKHPLQ2dj3zj",-679,[31,"71mBAiiERGEb8A2EprXYvV",[[20,"ItemNotification",["name"],43],[12,["position"],43,[1,0,0,0]],[12,["rotation"],43,[3,0,0,0,1]],[20,"ItemNotification",["_name"],43],[12,["_lpos"],43,[1,0,0,0]],[12,["_lrot"],43,[3,0,0,0,1]]]],19]],[33,"Title",33554432,69,[[6,-680,[5,306,61]],[16,-681,20]],[1,0,18,0],[1,0.75,0.75,0.75]],[3,"Title",33554432,70,[[6,-682,[5,266,140]],[16,-683,22]],[1,-145,60,0]],[9,"Name",33554432,44,[[[1,-684,[0,"c68UOAlNhN171Umca6yVvF"],[5,460,50]],-685],4,1],[1,-35,-25,0]],[8,"Icon",33554432,71,[[1,-686,[0,"f7NISe7HdAD68SLfhnddy8"],[5,84,84]],[4,-687,[0,"e71ctEmpxFC4KlSYRZNz/a"],24]]],[2,"Hammer",33554432,7,[-689],[[1,-688,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,500,400]]],[1,0,690,0]],[55,"Hammer",33554432,168,[[[6,-690,[5,606.99,484.48]],-691],4,1],[1,92,-110,0],[1,0.65,0.65,0.65]],[8,"Bg",33554432,8,[[1,-692,[0,"f7NISe7HdAD68SLfhnddy8"],[5,548,119]],[4,-693,[0,"e71ctEmpxFC4KlSYRZNz/a"],29]]],[9,"H1",33554432,8,[[[1,-694,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-695],4,1],[1,-236,0,0]],[9,"H2",33554432,8,[[[1,-696,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-697],4,1],[1,-150,0,0]],[9,"M1",33554432,8,[[[1,-698,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-699],4,1],[1,-43,0,0]],[9,"M2",33554432,8,[[[1,-700,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-701],4,1],[1,43,0,0]],[9,"S1",33554432,8,[[[1,-702,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-703],4,1],[1,150,0,0]],[9,"S2",33554432,8,[[[1,-704,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-705],4,1],[1,236,0,0]],[3,"Fg",33554432,8,[[1,-706,[0,"f7NISe7HdAD68SLfhnddy8"],[5,556,173]],[4,-707,[0,"e71ctEmpxFC4KlSYRZNz/a"],30]],[1,0,-23,0]],[3,"Hint",33554432,72,[[1,-708,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[175,"Bước giá (đặt làm tròn): 100đ",0,25,25,1,false,true,-709,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286594573],31]],[1,-120,60,0]],[83,"TEXT_LABEL",false,33554432,21,[[[5,-710,[0,"779kAXGTtMZKXfYlOg0Tfd"],[5,453,110],[0,0,1]],-711],4,1],[1,-225.5,55,0]],[9,"PLACEHOLDER_LABEL",33554432,21,[[[5,-712,[0,"d07wQj4whCUqYGJH1lEpVp"],[5,453,110],[0,0,1]],-713],4,1],[1,-225.5,55,0]],[8,"Icon",33554432,74,[[1,-714,[0,"f7NISe7HdAD68SLfhnddy8"],[5,94,100]],[4,-715,[0,"e71ctEmpxFC4KlSYRZNz/a"],35]]],[99,true,false,false,200,75,[0,"0b7a7v3FVOCpzmec7amMlB"],[[41,null],6,0],[32],[21,3,0.05,2],[11],[11],[21,3,200,300],[23,3,6.283185307179586],[23,3,6.283185307179586],[23,3,6.283185307179586],[11],[21,3,3,5],[24,20],[11],[11],[[103,0.01,[24,200]]],[104,[32]],[105,true,3,2,[24,1]],[106,true,[100,1,-721],[11],[11],[11]],[107,[11],[11],[11],[24,1]],[108,[21,3,0.3,-0.3],[21,3,0.3,-0.3],[21,3,0.3,-0.3]],[109,true,0.99,[62,1,100,-720],[63,100],[63,100],[62,1,150,-719]],[110,true,[23,3,6.283185307179586],[101,3],[102,2,18.84955592153876,-718,-717]],[111,true,3,3,1,true,[23,3,8],[11]],[112,[24,1],[11],[32],[32],-716],[113,42]],[3,"Label",33554432,112,[[1,-722,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"THÔNG BÁO",28,28,1,false,true,-723,[0,"2frm37uaJHQr0AEEaYyM82"],46]],[1,0,-39,0]],[8,"Icon",33554432,46,[[1,-724,[0,"f7NISe7HdAD68SLfhnddy8"],[5,84,84]],[4,-725,[0,"e71ctEmpxFC4KlSYRZNz/a"],48]]],[138,"Checkmark",false,33554432,28,[[[1,-726,[0,"e4k6OSwohL75lyfsntvPC5"],[5,63,63]],-727],4,1]],[3,"RichText",33554432,80,[[5,-728,[0,"4bf4SjaRxP4KcluNxRvaJw"],[5,478.09,67.8],[0,0,0.5]],[201,30,"<color=#4d4d4d>Tôi xác nhận đã đọc và đồng ý với</color> <b><color=#ff1284>thể lệ &\nđiều kiện</color></b> <color=#4d4d4d>của chương trình</color>",25,false,-729,[0,"b5LFduq8VJWo/DE4BRFmBn"],56,57]],[1,-200,-4.925,0]],[3,"Label",33554432,114,[[1,-730,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"ĐĂNG NHẬP",28,28,1,false,true,-731,[0,"2frm37uaJHQr0AEEaYyM82"],62]],[1,0,-39,0]],[8,"Icon",33554432,50,[[1,-732,[0,"f7NISe7HdAD68SLfhnddy8"],[5,84,84]],[4,-733,[0,"e71ctEmpxFC4KlSYRZNz/a"],64]]],[3,"Label",33554432,84,[[1,-734,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"THỂ LỆ",28,28,1,false,true,-735,[0,"2frm37uaJHQr0AEEaYyM82"],72]],[1,0,-39,0]],[8,"Icon",33554432,51,[[1,-736,[0,"f7NISe7HdAD68SLfhnddy8"],[5,84,84]],[4,-737,[0,"e71ctEmpxFC4KlSYRZNz/a"],74]]],[3,"Label",33554432,88,[[1,-738,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"THÔNG TIN",28,28,1,false,true,-739,[0,"2frm37uaJHQr0AEEaYyM82"],82]],[1,0,-39,0]],[8,"Icon",33554432,52,[[1,-740,[0,"f7NISe7HdAD68SLfhnddy8"],[5,84,84]],[4,-741,[0,"e71ctEmpxFC4KlSYRZNz/a"],84]]],[3,"Text",33554432,120,[[1,-742,[0,"f7NISe7HdAD68SLfhnddy8"],[5,301,65]],[4,-743,[0,"e71ctEmpxFC4KlSYRZNz/a"],96]],[1,0,-35,0]],[3,"Title",33554432,11,[[1,-744,[0,"c68UOAlNhN171Umca6yVvF"],[5,250,50]],[176,"Mã Voucher",25,25,1,false,-745,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4282532418],102]],[1,-47,45,0]],[9,"Code",33554432,11,[[[1,-746,[0,"c68UOAlNhN171Umca6yVvF"],[5,250,50]],-747],4,1],[1,-47,10,0]],[9,"Description",33554432,11,[[[1,-748,[0,"c68UOAlNhN171Umca6yVvF"],[5,250,50]],-749],4,1],[1,-47,-30,0]],[99,true,false,false,200,90,[0,"0b7a7v3FVOCpzmec7amMlB"],[[107,null],6,0],[32],[21,3,0.05,2],[11],[11],[21,3,200,300],[23,3,6.283185307179586],[23,3,6.283185307179586],[23,3,6.283185307179586],[11],[21,3,3,5],[24,20],[11],[11],[[103,0.01,[24,200]]],[104,[32]],[105,true,3,2,[24,1]],[106,true,[100,1,-755],[11],[11],[11]],[107,[11],[11],[11],[24,1]],[108,[21,3,0.3,-0.3],[21,3,0.3,-0.3],[21,3,0.3,-0.3]],[109,true,0.99,[62,1,100,-754],[63,100],[63,100],[62,1,150,-753]],[110,true,[23,3,6.283185307179586],[101,3],[102,2,18.84955592153876,-752,-751]],[111,true,3,3,1,true,[23,3,8],[11]],[112,[24,1],[11],[32],[32],-750],[113,108]],[8,"Icon",33554432,57,[[1,-756,[0,"f7NISe7HdAD68SLfhnddy8"],[5,84,84]],[4,-757,[0,"e71ctEmpxFC4KlSYRZNz/a"],118]]],[8,"icon_loading_logo",33554432,23,[[6,-758,[5,106,114]],[16,-759,124]]],[3,"Title",33554432,93,[[6,-760,[5,306,61]],[16,-761,136]],[1,0,8,0]],[3,"Title",33554432,59,[[6,-762,[5,266,140]],[16,-763,138]],[1,-145,60,0]],[9,"Name",33554432,58,[[[1,-764,[0,"c68UOAlNhN171Umca6yVvF"],[5,500,50]],-765],4,1],[1,0,-35,0]],[9,"Hammer",33554432,94,[[[6,-766,[5,606.99,484.48]],-767],4,1],[1,90,-70,0]],[84,"Label",33554432,95,[[[1,-768,[0,"c68UOAlNhN171Umca6yVvF"],[5,402.51,50.4]],-769],4,1]],[8,"Bg",33554432,9,[[1,-770,[0,"f7NISe7HdAD68SLfhnddy8"],[5,548,119]],[4,-771,[0,"e71ctEmpxFC4KlSYRZNz/a"],145]]],[9,"H1",33554432,9,[[[1,-772,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-773],4,1],[1,-236,0,0]],[9,"H2",33554432,9,[[[1,-774,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-775],4,1],[1,-150,0,0]],[9,"M1",33554432,9,[[[1,-776,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-777],4,1],[1,-43,0,0]],[9,"M2",33554432,9,[[[1,-778,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-779],4,1],[1,43,0,0]],[9,"S1",33554432,9,[[[1,-780,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-781],4,1],[1,150,0,0]],[9,"S2",33554432,9,[[[1,-782,[0,"c68UOAlNhN171Umca6yVvF"],[5,74,120]],-783],4,1],[1,236,0,0]],[3,"Fg",33554432,9,[[1,-784,[0,"f7NISe7HdAD68SLfhnddy8"],[5,556,173]],[4,-785,[0,"e71ctEmpxFC4KlSYRZNz/a"],146]],[1,0,-23,0]],[8,"Icon",33554432,60,[[1,-786,[0,"f7NISe7HdAD68SLfhnddy8"],[5,71,78]],[4,-787,[0,"e71ctEmpxFC4KlSYRZNz/a"],150]]],[8,"Icon",33554432,61,[[1,-788,[0,"f7NISe7HdAD68SLfhnddy8"],[5,107,118]],[4,-789,[0,"e71ctEmpxFC4KlSYRZNz/a"],152]]],[9,"Name",33554432,62,[[[1,-790,[0,"c68UOAlNhN171Umca6yVvF"],[5,750,100]],-791],4,1],[1,0,42.328,0]],[3,"Coin",33554432,63,[[1,-792,[0,"f7NISe7HdAD68SLfhnddy8"],[5,90,90]],[28,0,-793,[0,"e71ctEmpxFC4KlSYRZNz/a"],154]],[1,-90,0,0]],[9,"Turn",33554432,63,[[[1,-794,[0,"c68UOAlNhN171Umca6yVvF"],[5,100,50]],-795],4,1],[1,10,2,0]],[8,"Icon",33554432,96,[[1,-796,[0,"f7NISe7HdAD68SLfhnddy8"],[5,62,66]],[4,-797,[0,"e71ctEmpxFC4KlSYRZNz/a"],155]]],[78,"Spacing",1,[[36,-798,[5,750,100],[0,0.5,1]],[44,41,1430,100,-799]],[1,0,-1430,0]],[3,"Label",33554432,144,[[1,-800,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"DANH SÁCH ĐẤU GIÁ",28,28,1,false,true,-801,[0,"2frm37uaJHQr0AEEaYyM82"],163]],[1,0,-39,0]],[78,"Spacing",1,[[36,-802,[5,750,46],[0,0.5,1]],[44,41,2107,100,-803]],[1,0,-2107,0]],[3,"Border",33554432,31,[[5,-804,[0,"f7NISe7HdAD68SLfhnddy8"],[5,690,680],[0,0.5,1]],[13,1,0,-805,[0,"e71ctEmpxFC4KlSYRZNz/a"],166]],[1,0,-30,0]],[3,"Label",33554432,145,[[1,-806,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"CÁCH THAM GIA",28,28,1,false,true,-807,[0,"2frm37uaJHQr0AEEaYyM82"],167]],[1,0,-39,0]],[3,"Login",33554432,32,[[1,-808,[0,"c68UOAlNhN171Umca6yVvF"],[5,300,200]],[40,"Đăng nhập phiên\nđấu giá",29.999,29.999,35,1,false,-809,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281874488],169]],[1,-155,-180,0]],[3,"Gift",33554432,32,[[1,-810,[0,"c68UOAlNhN171Umca6yVvF"],[5,300,200]],[40,"Nhận quà ngẫu\nnhiên trước mỗi\nphiên đấu giá",29.999,29.999,35,1,false,-811,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281874488],170]],[1,155,-200,0]],[3,"Turns",33554432,32,[[1,-812,[0,"c68UOAlNhN171Umca6yVvF"],[5,300,200]],[40,"Đấu giá và mời\nbạn bè để có\nthêm lượt",29.999,29.999,35,1,false,-813,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281874488],171]],[1,-155,-475,0]],[3,"Result",33554432,32,[[1,-814,[0,"c68UOAlNhN171Umca6yVvF"],[5,300,200]],[40,"Theo dõi kết quả\nvào cuối phiên\nđấu giá",29.999,29.999,35,1,false,-815,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281874488],172]],[1,155,-475,0]],[3,"Label",33554432,147,[[1,-816,[0,"c68UOAlNhN171Umca6yVvF"],[5,400,50.4]],[26,"LỊCH SỬ ĐẤU GIÁ",28,28,1,false,true,-817,[0,"2frm37uaJHQr0AEEaYyM82"],176]],[1,0,-39,0]],[8,"Bg",33554432,148,[[1,-818,[0,"f7NISe7HdAD68SLfhnddy8"],[5,670,94]],[15,0,-819,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294965740],178]]],[3,"Time",33554432,100,[[5,-820,[0,"c68UOAlNhN171Umca6yVvF"],[5,100,94],[0,0,0.5]],[73,"Phiên",0,25,25,1,false,-821,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380],179]],[1,-310,0,0]],[3,"Description",33554432,100,[[5,-822,[0,"c68UOAlNhN171Umca6yVvF"],[5,320,94],[0,0,0.5]],[73,"Khách Sạn",0,25,25,1,false,-823,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380],180]],[1,-200,0,0]],[3,"Status",33554432,100,[[5,-824,[0,"c68UOAlNhN171Umca6yVvF"],[5,170,94],[0,0,0.5]],[73,"Giá Đấu",0,25,25,1,false,-825,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380],181]],[1,140,0,0]],[8,"Sprite",33554432,25,[[1,-826,[0,"f7NISe7HdAD68SLfhnddy8"],[5,80,80]],[28,0,-827,[0,"e71ctEmpxFC4KlSYRZNz/a"],182]]],[3,"Label",33554432,150,[[1,-828,[0,"c68UOAlNhN171Umca6yVvF"],[5,600,50.4]],[26,"DANH SÁCH NGƯỜI TRÚNG THƯỞNG",28,28,1,false,true,-829,[0,"2frm37uaJHQr0AEEaYyM82"],185]],[1,0,-39,0]],[8,"Bg",33554432,151,[[1,-830,[0,"f7NISe7HdAD68SLfhnddy8"],[5,670,94]],[15,0,-831,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4294831615],187]]],[3,"Winner",33554432,102,[[5,-832,[0,"c68UOAlNhN171Umca6yVvF"],[5,320,94],[0,0,0.5]],[72,"Khách Sạn",0,25,25,30,1,false,-833,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380],189]],[1,-200,0,0]],[3,"Price",33554432,102,[[5,-834,[0,"c68UOAlNhN171Umca6yVvF"],[5,170,94],[0,0,0.5]],[72,"Khách hàng",0,25,25,30,1,false,-835,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380],190]],[1,140,0,0]],[8,"Sprite",33554432,26,[[1,-836,[0,"f7NISe7HdAD68SLfhnddy8"],[5,80,80]],[28,0,-837,[0,"e71ctEmpxFC4KlSYRZNz/a"],191]]],[3,"Bottom",33554432,1,[[1,-838,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,189]],[4,-839,[0,"e71ctEmpxFC4KlSYRZNz/a"],193]],[1,0,-4342.5,0]],[9,"bar",33554432,66,[[[5,-840,[0,"95oWyE8aJJxJ5UvVmOXyZU"],[5,10,401.0718954248366],[0,0,0]],-841],4,1],[1,-11,265.9281045751634,0]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[19,["7aFiDHn+NClKHPLQ2dj3zj"]],[128,"Main Camera","c9DMICJLFO5IeO07EPon7U",103,[[202,1822425087,-842,[4,4294953272]]],[1,-10,10,10],[3,-0.27781593346944056,-0.36497167621709875,-0.11507512748638377,0.8811195706053617],[1,-35,-45,0]],[164,false,14],[204,3,93,59,62,19,65,25,20,33,26,64,[-843,-844,-845,-846,-847,-848],[132,133,134,135,136,137,138,139]],[141,"Camera",2,[-849],[1,0,0,1000]],[203,0,1073741824,667,2000,6,41943040,248,[4,4294953272]],[43,0,105,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[94,"2",38,38,1,false,true,156,[0,"2frm37uaJHQr0AEEaYyM82"]],[177,"Giá tốt nhất từ 0đ đến 20.000đ ",0,20,20,false,false,159,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4280690989]],[95,"KHÁCH SẠN MƯỜNG THANH",32,32,2,false,false,true,166,[0,"2frm37uaJHQr0AEEaYyM82"]],[114,0,"default","APPEAR",169],[18,"0",101,100,2,false,true,171,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,172,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,173,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,174,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,175,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,176,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[178,"",2,40,1,false,false,179,[0,"ddIY+NJvlDTIQAg7PLVrGo"]],[179,"Nhập giá bạn đưa ra",0,28,28,110,1,false,false,true,180,[0,"8fhi7qRLFJbK0abIJuXmCW"],[4,4294960024]],[206,2,8,21,[0,"1bCHrwPGZOPrbmPh93kwpe"],261,262],[48,2,8,[[49,1],[207,0.82,1],[208,1,-3.17]]],[48,2,8,[[49,1],[50,0.2],[50,1]]],[48,2,8,[[49,1],[50,0.05],[50,1]]],[48,2,8,[[49,0.01],[50,1]]],[48,2,8,[[49,1],[209,0.05,0.6,-0.12,-0.12],[210,1,0.3,-0.07]]],[180,"Error here",40,1,false,111,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281150765]],[211,15,269],[74,"",113,[0,"abdA5skhVLkY1+gRdDYTFK"]],[43,0,185,[0,"25nHiyhlVLhbUiFI4JJ9Sn"]],[212,false,28,[0,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],28,272],[46,3,0.9,47,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"252de94ShdLxLFIQbxXPCxA","OnLoginMyTour",10]],[4,4292269782],47],[46,3,0.9,48,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"88819R1zIVFQawyuDuWo1i2","GoogleLogin",34]],[4,4292269782],48],[46,3,0.9,49,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"88819R1zIVFQawyuDuWo1i2","FacebookLogin",34]],[4,4292269782],49],[213,10,271,273,274,275,276],[74,"",115,[0,"abdA5skhVLkY1+gRdDYTFK"]],[214,17,278],[74,"",116,[0,"abdA5skhVLkY1+gRdDYTFK"]],[215,18,280],[205,false,0,"default","drop",119],[18,"AAAAAAAAAA",35,35,1,false,true,195,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4285137116]],[181,"Mã giảm giá phòng khách sạn",18,25,2,false,196,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4282532418]],[216,6,282,197,22,121,122,11,123,124,283,284],[217,12],[218,23,130],[95,"KHÁCH SẠN MƯỜNG THANH",30,30,2,false,false,true,202,[0,"2frm37uaJHQr0AEEaYyM82"]],[114,0,"default","APPEAR",203],[182,"Phiên đấu giá sẽ diễn ra trong",30,30,false,204,[0,"2frm37uaJHQr0AEEaYyM82"]],[18,"0",101,100,2,false,true,206,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,207,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,208,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,209,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,210,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[18,"0",101,100,2,false,true,211,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4286845695]],[183,"Nguyễn Văn A",40,1,false,true,215,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281546037]],[94,"2",38,38,1,false,true,217,[0,"2frm37uaJHQr0AEEaYyM82"]],[144,1,0,240,[0,"02Vchn8fFF/77B+7pVCQuQ"],[4,6579300]],[219,1,true,66,[0,"f4i77UV0dH4pcD0KQOXx7c"],299],[193,0.23,false,false,29,[0,"a8UaPDxYhIX5MrqvKGMJdR"],1,300],[54,[30,"7aFiDHn+NClKHPLQ2dj3zj",-850,[31,"ddQJ/0upNCGIlyUUWcERv4",[[20,"ItemNotification",["name"],241],[12,["position"],241,[1,0,200,0]],[12,["rotation"],241,[3,0,0,0,1]]]],197]],[54,[30,"7aFiDHn+NClKHPLQ2dj3zj",-851,[31,"37t1CQKxNJL6br5zD6kmG4",[[20,"ItemNotification",["name"],242],[12,["position"],242,[1,0,0,0]],[12,["rotation"],242,[3,0,0,0,1]]]],198]],[54,[30,"7aFiDHn+NClKHPLQ2dj3zj",-852,[31,"99ZMLgGHhGbKjvsXnfkBEE",[[20,"ItemNotification",["name"],243],[12,["position"],243,[1,0,-100,0]],[12,["rotation"],243,[3,0,0,0,1]]]],199]],[54,[30,"7aFiDHn+NClKHPLQ2dj3zj",-853,[31,"b1SLo7N61Of589yzmDLAqH",[[20,"ItemNotification",["name"],244],[12,["position"],244,[1,0,-200,0]],[12,["rotation"],244,[3,0,0,0,1]]]],200]]],0,[0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,62,0,-3,219,0,-4,24,0,-5,221,0,-6,31,0,-7,19,0,-8,20,0,-9,239,0,0,2,0,30,249,0,0,2,0,0,2,0,-1,248,0,-2,3,0,-3,5,0,-4,15,0,-5,10,0,-6,17,0,-7,18,0,-8,6,0,-9,12,0,-10,23,0,0,3,0,-2,247,0,0,3,0,-1,29,0,0,4,0,0,4,0,-1,131,0,-2,13,0,-3,140,0,-4,58,0,-5,94,0,-6,95,0,-7,9,0,-8,30,0,-9,60,0,-10,61,0,0,5,0,0,5,0,-3,45,0,-1,35,0,-2,36,0,-3,7,0,-4,110,0,-5,75,0,0,6,0,0,6,0,-3,285,0,0,6,0,-1,89,0,-2,117,0,-3,118,0,-4,53,0,-5,22,0,0,7,0,0,7,0,-1,107,0,-2,38,0,-3,39,0,-4,44,0,-5,168,0,-6,8,0,-7,72,0,-8,74,0,0,8,0,0,8,0,-1,170,0,-2,171,0,-3,172,0,-4,173,0,-5,174,0,-6,175,0,-7,176,0,-8,177,0,0,9,0,0,9,0,-1,205,0,-2,206,0,-3,207,0,-4,208,0,-5,209,0,-6,210,0,-7,211,0,-8,212,0,0,10,0,0,10,0,-3,277,0,-1,78,0,-2,16,0,-3,114,0,-4,50,0,0,11,0,0,11,0,-1,123,0,-2,124,0,-3,194,0,-4,195,0,-5,196,0,-6,54,0,0,12,0,0,12,0,-3,286,0,-1,91,0,-2,55,0,-3,56,0,-4,57,0,0,13,0,-1,132,0,-2,133,0,-3,134,0,-4,135,0,-5,136,0,-6,137,0,-7,138,0,-8,139,0,-1,246,0,0,15,0,0,15,0,-3,270,0,-1,76,0,-2,77,0,-3,112,0,-4,46,0,0,16,0,0,16,0,0,16,0,-1,79,0,-2,80,0,-3,47,0,-4,48,0,-5,49,0,0,17,0,0,17,0,-3,279,0,-1,81,0,-2,82,0,-3,84,0,-4,51,0,0,18,0,0,18,0,-3,281,0,-1,85,0,-2,86,0,-3,88,0,-4,52,0,0,19,0,0,19,0,0,19,0,-1,146,0,-2,147,0,-3,99,0,-4,25,0,0,20,0,0,20,0,0,20,0,-1,149,0,-2,150,0,-3,101,0,-4,26,0,0,21,0,0,21,0,-3,263,0,0,21,0,-1,179,0,-2,180,0,-3,73,0,0,22,0,-1,120,0,-2,121,0,-3,122,0,-5,90,0,0,23,0,0,23,0,0,23,0,-4,287,0,-1,129,0,-2,199,0,-3,130,0,0,24,0,0,24,0,0,24,0,-1,142,0,-2,143,0,-3,144,0,-4,97,0,0,25,0,0,25,0,5,25,0,0,25,0,0,25,0,-1,233,0,0,26,0,0,26,0,5,26,0,0,26,0,0,26,0,-1,238,0,0,27,0,0,27,0,0,27,0,-1,155,0,-2,156,0,-3,67,0,0,28,0,0,28,0,-3,273,0,0,28,0,-1,185,0,0,29,0,0,29,0,-3,301,0,0,29,0,-1,92,0,-2,66,0,0,30,0,0,30,0,5,30,0,0,30,0,0,30,0,-1,141,0,0,31,0,0,31,0,0,31,0,-1,222,0,-2,145,0,-3,32,0,0,32,0,0,32,0,-1,224,0,-2,225,0,-3,226,0,-4,227,0,0,33,0,0,33,0,0,33,0,0,33,0,-1,151,0,31,246,0,32,286,0,33,285,0,34,281,0,35,279,0,36,277,0,37,270,0,38,287,0,39,45,0,40,247,0,0,34,0,0,34,0,-1,153,0,0,35,0,0,35,0,0,35,0,-1,104,0,-2,105,0,0,36,0,0,36,0,-1,106,0,-2,37,0,0,37,0,5,37,0,0,37,0,0,37,0,-1,154,0,0,38,0,0,38,0,-1,158,0,-2,108,0,-3,68,0,0,39,0,-1,160,0,-2,161,0,-3,162,0,-4,163,0,0,44,0,-1,69,0,-2,70,0,-3,166,0,-4,71,0,-1,160,0,-2,161,0,-3,162,0,-4,163,0,-1,255,0,-2,256,0,-3,257,0,-4,258,0,-5,259,0,-6,260,0,0,46,0,5,46,0,0,46,0,0,46,0,-1,184,0,0,47,0,0,47,0,-3,274,0,0,47,0,0,48,0,0,48,0,-3,275,0,0,48,0,0,49,0,0,49,0,-3,276,0,0,49,0,0,50,0,5,50,0,0,50,0,0,50,0,-1,188,0,0,51,0,5,51,0,0,51,0,0,51,0,-1,190,0,0,52,0,5,52,0,0,52,0,0,52,0,-1,192,0,0,53,0,5,53,0,0,53,0,0,53,0,-1,119,0,0,54,0,0,54,0,5,54,0,0,54,0,-1,125,0,0,55,0,0,55,0,0,55,0,-1,126,0,-2,127,0,0,56,0,0,56,0,5,56,0,0,56,0,-1,128,0,0,57,0,5,57,0,0,57,0,0,57,0,-1,198,0,0,58,0,0,58,0,-1,93,0,-2,59,0,-3,202,0,0,59,0,0,59,0,0,59,0,-1,201,0,0,60,0,5,60,0,0,60,0,0,60,0,-1,213,0,0,61,0,5,61,0,0,61,0,0,61,0,-1,214,0,0,62,0,0,62,0,-1,215,0,-2,63,0,0,63,0,0,63,0,-1,216,0,-2,217,0,-3,96,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,-1,148,0,0,66,0,0,66,0,0,66,0,-4,300,0,-1,240,0,0,67,0,5,67,0,0,67,0,-1,157,0,0,68,0,0,68,0,0,68,0,-1,159,0,0,69,0,0,69,0,-1,164,0,0,70,0,0,70,0,-1,165,0,0,71,0,5,71,0,0,71,0,-1,167,0,0,72,0,0,72,0,-1,178,0,-2,109,0,0,73,0,0,73,0,0,73,0,0,74,0,5,74,0,0,74,0,-1,181,0,0,75,0,-2,182,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,-1,111,0,0,78,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,-1,113,0,0,80,0,0,80,0,-2,186,0,0,81,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,-1,83,0,0,83,0,0,83,0,0,83,0,-1,115,0,0,84,0,0,84,0,0,84,0,-1,189,0,0,85,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,-1,87,0,0,87,0,0,87,0,0,87,0,-1,116,0,0,88,0,0,88,0,0,88,0,-1,191,0,0,89,0,0,89,0,0,89,0,0,89,0,0,90,0,-2,197,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,-1,200,0,0,94,0,5,94,0,0,94,0,-1,203,0,0,95,0,0,95,0,0,95,0,-1,204,0,0,96,0,5,96,0,0,96,0,-1,218,0,0,97,0,0,97,0,0,97,0,-1,98,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,100,0,-1,230,0,-2,231,0,-3,232,0,0,101,0,0,101,0,0,101,0,0,102,0,-1,152,0,-2,236,0,-3,237,0,13,302,0,13,303,0,13,304,0,13,305,0,-1,245,0,0,104,0,0,104,0,0,104,0,0,105,0,-2,250,0,0,105,0,0,106,0,0,106,0,0,106,0,0,107,0,0,107,0,0,107,0,0,108,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,-2,269,0,0,111,0,0,112,0,0,112,0,-1,183,0,0,113,0,-2,271,0,0,113,0,0,114,0,0,114,0,-1,187,0,0,115,0,-2,278,0,0,115,0,0,116,0,-2,280,0,0,116,0,0,117,0,0,117,0,0,117,0,0,118,0,0,118,0,0,118,0,0,119,0,-2,282,0,0,119,0,0,120,0,0,120,0,-1,193,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,125,0,0,126,0,0,126,0,0,126,0,0,127,0,0,127,0,0,127,0,0,128,0,0,128,0,0,128,0,0,129,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,140,0,0,141,0,0,141,0,0,141,0,0,142,0,0,142,0,0,142,0,0,143,0,0,143,0,0,143,0,0,144,0,0,144,0,-1,220,0,0,145,0,0,145,0,-1,223,0,0,146,0,0,146,0,0,146,0,0,147,0,0,147,0,-1,228,0,0,148,0,-1,229,0,0,149,0,0,149,0,0,149,0,0,150,0,0,150,0,-1,234,0,0,151,0,-1,235,0,0,152,0,0,152,0,0,152,0,0,153,0,0,154,0,0,154,0,0,155,0,0,155,0,0,156,0,-2,251,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,-2,252,0,7,160,0,7,161,0,7,162,0,7,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,-2,253,0,0,167,0,0,167,0,0,168,0,-1,169,0,0,169,0,-2,254,0,0,170,0,0,170,0,0,171,0,-2,255,0,0,172,0,-2,256,0,0,173,0,-2,257,0,0,174,0,-2,258,0,0,175,0,-2,259,0,0,176,0,-2,260,0,0,177,0,0,177,0,0,178,0,0,178,0,0,179,0,-2,261,0,0,180,0,-2,262,0,0,181,0,0,181,0,19,182,0,20,268,0,21,267,0,12,266,0,12,265,0,12,264,0,0,183,0,0,183,0,0,184,0,0,184,0,0,185,0,-2,272,0,0,186,0,0,186,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,0,190,0,0,190,0,0,191,0,0,191,0,0,192,0,0,192,0,0,193,0,0,193,0,0,194,0,0,194,0,0,195,0,-2,283,0,0,196,0,-2,284,0,19,197,0,20,268,0,21,267,0,12,266,0,12,265,0,12,264,0,0,198,0,0,198,0,0,199,0,0,199,0,0,200,0,0,200,0,0,201,0,0,201,0,0,202,0,-2,288,0,0,203,0,-2,289,0,0,204,0,-2,290,0,0,205,0,0,205,0,0,206,0,-2,291,0,0,207,0,-2,292,0,0,208,0,-2,293,0,0,209,0,-2,294,0,0,210,0,-2,295,0,0,211,0,-2,296,0,0,212,0,0,212,0,0,213,0,0,213,0,0,214,0,0,214,0,0,215,0,-2,297,0,0,216,0,0,216,0,0,217,0,-2,298,0,0,218,0,0,218,0,0,219,0,0,219,0,0,220,0,0,220,0,0,221,0,0,221,0,0,222,0,0,222,0,0,223,0,0,223,0,0,224,0,0,224,0,0,225,0,0,225,0,0,226,0,0,226,0,0,227,0,0,227,0,0,228,0,0,228,0,0,229,0,0,229,0,0,230,0,0,230,0,0,231,0,0,231,0,0,232,0,0,232,0,0,233,0,0,233,0,0,234,0,0,234,0,0,235,0,0,235,0,0,236,0,0,236,0,0,237,0,0,237,0,0,238,0,0,238,0,0,239,0,0,239,0,0,240,0,-2,299,0,0,245,0,-1,291,0,-2,292,0,-3,293,0,-4,294,0,-5,295,0,-6,296,0,-1,249,0,7,302,0,7,303,0,7,304,0,7,305,0,41,103,1,6,92,2,6,103,11,6,22,14,6,153,21,6,109,27,6,36,28,6,80,33,6,101,34,6,103,45,42,73,45,43,263,45,22,251,45,23,253,45,44,182,45,45,110,45,24,254,45,46,70,45,47,69,45,48,252,45,49,250,64,6,98,65,6,99,100,6,148,102,6,151,247,22,298,247,50,297,247,23,288,247,51,290,247,24,289,300,52,301,853],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,250,251,252,253,254,255,256,257,258,259,260,261,262,269,272,273,274,275,276,282,283,284,288,289,290,291,292,293,294,295,296,297,298,299,247,247,247],[14,1,1,1,4,1,1,4,8,9,10,1,1,1,2,1,11,11,11,11,1,1,1,1,1,4,8,9,10,1,1,2,2,1,1,1,4,8,9,10,1,-1,25,14,1,1,2,1,1,4,8,9,10,1,1,1,2,53,1,1,1,1,2,1,1,4,8,9,10,1,1,1,2,1,1,4,8,9,10,1,1,1,2,1,1,4,8,9,10,1,1,1,4,8,9,10,1,1,1,1,1,1,2,2,1,4,1,-1,25,14,14,1,2,2,1,2,1,4,1,4,8,9,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,8,9,10,1,1,1,2,1,4,1,4,1,4,1,1,4,8,9,10,1,1,1,2,1,1,1,2,1,2,2,2,2,1,1,1,2,1,1,2,2,2,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,11,11,11,11,14,1,2,2,2,16,2,2,2,2,2,2,2,2,2,1,4,4,4,4,16,2,2,2,16,2,2,2,2,2,2,2,2,2,1,54,55,56],[46,4,19,20,4,13,21,3,3,6,7,22,47,17,1,48,10,10,10,10,23,14,24,14,49,3,3,6,7,25,26,1,5,27,11,50,3,3,6,7,51,28,16,29,4,52,1,9,12,3,3,6,7,4,18,30,5,5,31,32,33,11,1,9,12,3,3,6,7,4,18,11,1,9,12,3,3,6,7,4,18,11,1,9,12,3,3,6,7,4,53,54,3,3,6,7,55,9,34,35,34,35,5,5,15,15,56,28,16,29,57,4,1,1,58,5,15,15,12,3,3,6,7,4,59,60,61,13,62,63,36,13,36,64,17,19,23,14,24,14,3,3,6,7,27,25,26,1,37,37,20,4,65,4,13,21,3,3,6,7,22,4,4,1,9,4,11,1,9,1,1,1,1,66,4,38,1,9,4,1,1,1,39,4,38,1,9,4,1,1,1,39,4,67,4,40,68,10,10,10,10,69,4,1,5,1,41,8,8,8,8,8,8,5,5,5,70,30,31,32,33,71,5,5,1,41,5,8,8,8,8,8,8,1,1,40,72,73,74]],[[{"name":"app_download","rect":{"x":3,"y":1343,"width":693,"height":769},"offset":{"x":0,"y":0},"originalSize":{"width":693,"height":769},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"button_thele","rect":{"x":1419,"y":1934,"width":107,"height":118},"offset":{"x":0,"y":0},"originalSize":{"width":107,"height":118},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[51,"button_tap",".mp3",1.285063]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0}],[6],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b7MFJ8MjNBwqr3fNq1j5dJ"]}],[8],0,[],[],[]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"texture":"b730527c-3233-41c2-aaf7-7cdab58f9749@6c48a","packable":true}],[0],0,[0],[3],[75]],[[{"name":"mainscreen_top_artbg","rect":{"x":778,"y":3,"width":750,"height":812},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":812},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[115,"skeleton","\nskeleton.png\nsize: 511,260\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nBUA_BOTTOM\n  rotate: true\n  xy: 2, 29\n  size: 34, 214\n  orig: 34, 214\n  offset: 0, 0\n  index: -1\nBUA_TOP\n  rotate: true\n  xy: 345, 2\n  size: 146, 115\n  orig: 146, 115\n  offset: 0, 0\n  index: -1\nBUAglow\n  rotate: true\n  xy: 2, 65\n  size: 193, 341\n  orig: 240, 484\n  offset: 24, 71\n  index: -1\nBUC\n  rotate: false\n  xy: 218, 3\n  size: 116, 60\n  orig: 157, 63\n  offset: 16, 1\n  index: -1\nBUCglow\n  rotate: false\n  xy: 345, 150\n  size: 164, 108\n  orig: 229, 123\n  offset: 28, 7\n  index: -1\nHIT\n  rotate: true\n  xy: 462, 32\n  size: 116, 44\n  orig: 118, 44\n  offset: 0, 0\n  index: -1\nSHADOW\n  rotate: false\n  xy: 2, 4\n  size: 129, 23\n  orig: 129, 23\n  offset: 0, 0\n  index: -1\n",["skeleton.png"],{"skeleton":{"hash":"9aCzxDFzqZhXyfMDIvUVO7p9T14","spine":"3.8.99","x":-383.06,"y":-119.19,"width":606.99,"height":484.48,"images":"./HAMMER_IMAGES/","audio":""},"bones":[{"name":"root"},{"name":"BUA_BOTTOM","parent":"root","length":69.64,"rotation":91.11,"x":-261.88,"y":-15.44},{"name":"BUA_BOTTOM3","parent":"BUA_BOTTOM","x":106.14,"y":-1.49},{"name":"BUA_TOP","parent":"BUA_BOTTOM3","length":26.36,"rotation":-1.11,"x":62.84,"y":-1.11},{"name":"BUC","parent":"root","length":22.32,"rotation":91.74,"x":0.4,"y":43.38}],"slots":[{"name":"SHADOW","bone":"BUC","attachment":"SHADOW"},{"name":"BUC","bone":"BUC","attachment":"BUC"},{"name":"BUA_BOTTOM","bone":"BUA_BOTTOM3","attachment":"BUA_BOTTOM"},{"name":"BUA_TOP","bone":"BUA_TOP","attachment":"BUA_TOP"},{"name":"BUAglow","bone":"BUA_TOP","color":"ffffff6c","attachment":"BUAglow","blend":"additive"},{"name":"BUCglow","bone":"BUC","attachment":"BUCglow","blend":"additive"},{"name":"HIT","bone":"root","color":"ffffff89","attachment":"HIT"}],"skins":[{"name":"default","attachments":{"BUA_BOTTOM":{"BUA_BOTTOM":{"x":-7.83,"y":-1.16,"rotation":-91.11,"width":34,"height":214}},"BUA_TOP":{"BUA_TOP":{"x":59.31,"y":-0.01,"rotation":-90,"width":146,"height":115}},"BUAglow":{"BUAglow":{"x":-30.51,"y":0.02,"rotation":-90.11,"width":240,"height":484}},"BUC":{"BUC":{"x":25.73,"y":-5.81,"rotation":-91.74,"width":157,"height":63}},"BUCglow":{"BUCglow":{"x":26.13,"y":-5.84,"rotation":-91.62,"width":229,"height":123}},"HIT":{"HIT":{"x":79.19,"y":23.11,"scaleX":2.4532,"scaleY":2.4532,"width":118,"height":44}},"SHADOW":{"SHADOW":{"x":5.38,"y":-1.4,"rotation":-91.74,"width":129,"height":23}}}}],"events":{"dat gia thanh cong":{}},"animations":{"APPEAR":{"slots":{"BUAglow":{"color":[{"color":"ffffff00","curve":0.25,"c3":0.75},{"time":0.3333,"color":"ffffffdb","curve":0.25,"c3":0.75},{"time":0.5,"color":"ffffff39"}]},"BUCglow":{"color":[{"color":"ffffff00"},{"time":0.2,"color":"ffffffff"},{"time":0.5,"color":"ffffff38"}]},"HIT":{"attachment":[{"name":null}]}},"bones":{"BUA_BOTTOM":{"rotate":[{"angle":-50.6}],"translate":[{"x":-851.16,"y":129.1,"curve":0.537,"c3":0.539},{"time":0.5,"x":51.01,"y":194.71}],"scale":[{"curve":0.25,"c3":0.75},{"time":0.1,"x":0.733,"y":1.242,"curve":0.25,"c3":0.75},{"time":0.2333,"x":1.451,"y":0.8,"curve":0.25,"c3":0.75},{"time":0.5}]},"BUC":{"translate":[{"x":1164.42,"curve":0.512,"c3":0.365},{"time":0.5,"x":-1.36}],"scale":[{"curve":0.25,"c3":0.75},{"time":0.2,"y":2.69,"curve":0.25,"c3":0.75},{"time":0.5,"curve":"stepped"},{"time":1.3333}]},"BUA_BOTTOM3":{"rotate":[{"angle":-46.08,"curve":0.354,"c3":0.655,"c4":0.99},{"time":0.2333,"angle":19.65,"curve":0.25,"c3":0.551},{"time":0.5,"angle":-24.18}]}}},"DEAL":{"slots":{"BUAglow":{"color":[{"color":"ffffff1b","curve":"stepped"},{"time":0.2333,"color":"ffffff80"},{"time":0.3333,"color":"ffffff1b"}]},"BUCglow":{"color":[{"color":"ffffff31","curve":"stepped"},{"time":0.2333,"color":"ffffffb0","curve":0.25,"c3":0.75},{"time":0.3333,"color":"ffffff31"}]},"HIT":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.2333,"color":"ffffffff"},{"time":0.3333,"color":"ffffff00"}]}},"bones":{"BUA_BOTTOM":{"rotate":[{"curve":0,"c2":0.6,"c3":0,"c4":1.1},{"time":0.1667,"angle":75.14,"curve":0.728,"c2":-0.43,"c4":0.39},{"time":0.2333,"angle":-11.39,"curve":0.25,"c3":0.75},{"time":0.3,"angle":-0.49,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":-8.33,"curve":0.316,"c3":0.65,"c4":0.35},{"time":0.4333,"angle":-4.66,"curve":0.274,"c2":0.11,"c3":0.753},{"time":0.5,"angle":-8.33,"curve":"stepped"},{"time":1,"angle":-8.33}],"translate":[{"x":51.01,"y":194.71,"curve":0,"c2":0.6,"c3":0,"c4":1.1},{"time":0.1667,"x":40.89,"y":164.94,"curve":0.728,"c2":-0.43,"c4":0.39},{"time":0.2333,"x":40.63,"y":121.18}]},"BUC":{"scale":[{"curve":"stepped"},{"time":0.2333,"x":0.7,"y":1.3,"curve":0.25,"c3":0.75},{"time":0.3,"x":1.3,"y":0.7},{"time":0.3667}]},"BUA_BOTTOM3":{"rotate":[{"angle":-80.12}],"translate":[{"x":-39.93,"y":-81.48}]}},"events":[{"time":0.4333,"name":"dat gia thanh cong"}]},"IDLE2":{"slots":{"BUAglow":{"color":[{"color":"ffffff1b","curve":0.25,"c3":0.75},{"time":0.6667,"color":"ffffffb6","curve":0.25,"c3":0.75},{"time":1.3333,"color":"ffffff1b"}]},"BUCglow":{"color":[{"color":"ffffff31","curve":0.25,"c3":0.75},{"time":0.6667,"color":"ffffffa2","curve":0.25,"c3":0.75},{"time":1.3333,"color":"ffffff31"}]},"HIT":{"attachment":[{"name":null}]}},"bones":{"BUA_BOTTOM":{"translate":[{"x":51.01,"y":194.71,"curve":0.25,"c3":0.75},{"time":0.6667,"x":66.93,"y":165.89,"curve":0.25,"c3":0.75},{"time":1.3333,"x":51.01,"y":194.71}]},"BUC":{"translate":[{"x":-1.36}]},"BUA_BOTTOM3":{"rotate":[{"angle":-80.12,"curve":0.217,"c2":0.55,"c3":0.499},{"time":0.2667,"angle":-74.79,"curve":0.622,"c3":0.371},{"time":0.9333,"angle":-99.24,"curve":0.525,"c3":0.695,"c4":0.56},{"time":1.3333,"angle":-80.12}],"translate":[{"x":-39.93,"y":-81.48}]}}}}},[0]]],0,0,[0],[-1],[76]],[[{"name":"COIN_3","rect":{"x":3,"y":72,"width":65,"height":71},"offset":{"x":0,"y":1},"originalSize":{"width":75,"height":75},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"icon_loading_logo","rect":{"x":1543,"y":1934,"width":106,"height":114},"offset":{"x":0.5,"y":-0.5},"originalSize":{"width":237,"height":237},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"thongbao","rect":{"x":295,"y":244,"width":105,"height":105},"offset":{"x":0,"y":0},"originalSize":{"width":105,"height":105},"rotated":false,"capInsets":[50,50,50,50],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[[64,"ItemBidding"],[66,"ItemBidding",33554432,[-9,-10],[[1,-2,[0,"6a606hNzlLpqqTAXDGFzGt"],[5,670,94]],[220,-8,[0,"235Eo9J4FNQJ+uv+k607Ff"],-7,-6,-5,-4,-3]],[10,"80oVypFg9Ea5rK9ZuAfYlh",-1,0],[1,0,-141,0]],[79,"Container",33554432,1,[-12,-13,-14,-15],[[1,-11,[0,"3242DVCWtMepBNxixN/wo6"],[5,620,94]]],[10,"2cAB3vm0dMyI7ZFgt7HE8v",1,0]],[67,"Bg",33554432,1,[[[1,-16,[0,"f7NISe7HdAD68SLfhnddy8"],[5,670,94]],-17],4,1],[10,"a8OMyFqFRGBqO1fu7Q0rmJ",1,0]],[22,"Time",33554432,2,[[[5,-18,[0,"c68UOAlNhN171Umca6yVvF"],[5,100,94],[0,0,0.5]],-19],4,1],[10,"138ACOBEhDCJHTetcW3C00",1,0],[1,-310,0,0]],[22,"Hotel",33554432,2,[[[5,-20,[0,"c68UOAlNhN171Umca6yVvF"],[5,320,94],[0,0,0.5]],-21],4,1],[10,"8aK+R4pM9M2YIhahqJqu60",1,0],[1,-200,0,0]],[22,"Price",33554432,2,[[[5,-22,[0,"c68UOAlNhN171Umca6yVvF"],[5,170,37.8],[0,0,0.5]],-23],4,1],[10,"4e/TVRUaZFHJwrL1PpdXPr",1,0],[1,140,15,0]],[22,"Duplicate",33554432,2,[[[5,-24,[0,"02AnTlmslKvaHvqWsStrGz"],[5,170,37.8],[0,0,0.5]],-25],4,1],[10,"9eR1r9yUhOQrz9HQkkVJ7M",1,0],[1,140,-15,0]],[43,0,3,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[184,"02/07\n16:59",0,25,25,30,1,false,4,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380]],[96,"Khách sạn Mường Thanh",0,25,25,30,1,false,false,5,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380]],[97,"2",0,20,20,30,1,false,true,6,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380]],[96,"(999 người cùng giá)",0,18,18,30,1,false,false,7,[0,"19vRN1mglAgr4dDRfOtDuO"],[4,4284769380]]],0,[0,7,1,0,0,1,0,57,12,0,26,11,0,17,10,0,18,9,0,27,8,0,0,1,0,-1,3,0,-2,2,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,0,3,0,-2,8,0,0,4,0,-2,9,0,0,5,0,-2,10,0,0,6,0,-2,11,0,0,7,0,-2,12,0,15,1,25],[8,9,10,11,12],[1,2,2,2,2],[4,5,5,5,5]],[[[51,"bgm",".mp3",33.645714]],0,0,[],[],[]],[[[64,"ItemProgram"],[66,"ItemProgram",33554432,[-12,-13,-14,-15,-16,-17],[[5,-2,[0,"6a606hNzlLpqqTAXDGFzGt"],[5,280,423],[0,0,0.5]],[165,3,0.95,-4,[0,"demzY8X2pN07TTjB6Aju5G"],[[7,"7b38eim8h9B5ozHT5BG2m7Y","Info",-3]]],[221,-11,[0,"51OKZ7LeJEBajmFB/+z0cu"],-10,-9,-8,-7,-6,-5]],[10,"80oVypFg9Ea5rK9ZuAfYlh",-1,0],[1,-140,0,0]],[80,"BgPink",33554432,1,[[1,-18,[0,"f7NISe7HdAD68SLfhnddy8"],[5,280,423]],[28,0,-19,[0,"e71ctEmpxFC4KlSYRZNz/a"],0],[91,45,64,64,-20,[0,"475I1t28ZJRp7JB9Em+HjG"]]],[10,"a8OMyFqFRGBqO1fu7Q0rmJ",1,0],[1,140,0,0]],[129,"BgBlue",false,33554432,1,[[1,-21,[0,"ebAmohRdtFr6LFE1iCqU5z"],[5,280,423]],[28,0,-22,[0,"81ocjVG/xGEJnDH744VCpT"],1],[91,45,64,64,-23,[0,"99yOFCPGFHIY4+xSoSDaob"]]],[10,"64PpGsFc9DWZp2i5qS+d3k",1,0],[1,140,0,0]],[130,"Border",33554432,1,[-26,-27],[[1,-24,[0,"f7NISe7HdAD68SLfhnddy8"],[5,82,82]],[157,36,15,26,-25,[0,"6d/RyAtJlKdpug5bqBhGQ/"]]],[10,"eaWUhgc85AkqE4sYjRAwMD",1,0],[1,224,-144.5,0]],[22,"Time",33554432,1,[[[1,-28,[0,"c68UOAlNhN171Umca6yVvF"],[5,160,50]],-29,[158,9,16.5,118.87,20,186.3,42.26,50.4,-30,[0,"e34O/+IHxJm6li7VdWBwqK"]]],4,1,4],[10,"6bD1iWtCVGXJQ5tiKLvUpH",1,0],[1,96.5,166.5,0]],[22,"Hotel",33554432,1,[[[5,-31,[0,"c68UOAlNhN171Umca6yVvF"],[5,164,110],[0,0.5,0]],-32,[92,44,16,100,31.5,42.26,-33,[0,"d10mHO55JPdqwIypdsesmX"]]],4,1,4],[10,"98t4J/MY1JPa115NySkeQy",1,0],[1,98,-180,0]],[139,"Location",false,33554432,1,[[[1,-34,[0,"4cYSUTjKJLX7SvvC7KocKH"],[5,164,30]],-35,[92,44,16,100,24,42.26,-36,[0,"8e1cKMCcZIP7xkIq0yuOLO"]]],4,1,4],[10,"b0QHne1CJBDLBOxR/um8qo",1,0],[1,98,-172.5,0]],[67,"Thumnail",33554432,4,[[[1,-37,[0,"f7NISe7HdAD68SLfhnddy8"],[5,80,80]],-38],4,1],[10,"79MBrQ6rpPX6hm7CO+Fvo9",1,0]],[131,"Border-001",33554432,4,[[1,-39,[0,"b1ovyqB3FGLogU96phzone"],[5,82,82]],[4,-40,[0,"392g9X97tN8YUnoXQOJKbP"],2]],[10,"f8or7Iqw1KyY6qGZ0QOkRg",1,0]],[185,"09:00 - 05/05",20,20,1,false,5,[0,"2frm37uaJHQr0AEEaYyM82"]],[186,"Mường Thanh",0,2,25,25,25,1,false,6,[0,"2frm37uaJHQr0AEEaYyM82"]],[187,"ĐÀ NẴNG",0,18,18,1,false,false,7,[0,"6bLcpm4FZAhYBGBdmfGkj4"]],[43,0,8,[0,"e71ctEmpxFC4KlSYRZNz/a"]]],0,[0,7,1,0,0,1,0,13,1,0,0,1,0,58,13,0,59,12,0,17,11,0,18,10,0,60,3,0,61,2,0,0,1,0,-1,2,0,-2,3,0,-3,5,0,-4,6,0,-5,7,0,-6,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,-1,8,0,-2,9,0,0,5,0,-2,10,0,0,5,0,0,6,0,-2,11,0,0,6,0,0,7,0,-2,12,0,0,7,0,0,8,0,-2,13,0,0,9,0,0,9,0,15,1,40],[0,0,0,10,11,12],[1,1,1,2,2,2],[77,78,79,5,5,5]],[[{"name":"check_0","rect":{"x":72,"y":3,"width":63,"height":63},"offset":{"x":0,"y":0},"originalSize":{"width":63,"height":63},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[[222,"builtin-particle",[{"hash":1755172438,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":3314483928,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":3916783067,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":37}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":1118626722,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":37}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[{"name":"quatang_2","rect":{"x":1584,"y":1577,"width":393,"height":219},"offset":{"x":0,"y":0},"originalSize":{"width":393,"height":219},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"logo_daugianguoc","rect":{"x":1371,"y":759,"width":653,"height":418},"offset":{"x":0,"y":0},"originalSize":{"width":653,"height":418},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"quatang_chucmung_typo","rect":{"x":1663,"y":442,"width":301,"height":65},"offset":{"x":0,"y":0},"originalSize":{"width":301,"height":65},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"COIN_2","rect":{"x":1806,"y":691,"width":45,"height":71},"offset":{"x":0,"y":1},"originalSize":{"width":75,"height":75},"rotated":true,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[64,"ItemNotification"],[132,"ItemNotification",33554432,[-6,-7],[[1,-2,[0,"f7NISe7HdAD68SLfhnddy8"],[5,450,36]],[13,1,0,-3,[0,"e71ctEmpxFC4KlSYRZNz/a"],1],[223,-5,[0,"88W+AM2qdM7YL43Rm/wu6E"],-4]],[10,"7aFiDHn+NClKHPLQ2dj3zj",-1,0]],[133,"Icon",33554432,1,[[1,-8,[0,"f7NISe7HdAD68SLfhnddy8"],[5,124,178]],[4,-9,[0,"e71ctEmpxFC4KlSYRZNz/a"],0],[159,8,6.400000000000006,1,-10,[0,"65oDYTDFhIvpew8YpwQMfA"]]],[10,"6cHztr+OVHOa6KfSxvgSfC",1,0],[1,-200,10,0],[3,0,0,-0.49999999999999994,0.8660254037844387],[1,0.3,0.3,0.3],[1,0,0,-60]],[22,"Label",33554432,1,[[[1,-11,[0,"c68UOAlNhN171Umca6yVvF"],[5,385,36]],-12,[160,45,65,42.22,50.4,1,-13,[0,"cduD0aCNtBFK4RCCgUXAF2"]]],4,1,4],[10,"84yO6BiwFDMrUdCMsCSdJv",1,0],[1,32.5,0,0]],[188,0,18,18,1,false,false,3,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4281479730]]],0,[0,7,1,0,0,1,0,0,1,0,62,4,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,3,0,-2,4,0,0,3,0,15,1,13],[0,0,4],[1,1,2],[17,80,5]],[[{"name":"white","rect":{"x":211,"y":3,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"btt_dangnhap_mytour","rect":{"x":307,"y":695,"width":556,"height":91},"offset":{"x":0,"y":0},"originalSize":{"width":556,"height":91},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"main_sapdaugia_bamboo","rect":{"x":1298,"y":1505,"width":280,"height":423},"offset":{"x":0,"y":0},"originalSize":{"width":280,"height":423},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[115,"GIFTBOX_export","\nGIFTBOX_export.png\nsize: 1283,1065\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nEXPLO_2_1\n  rotate: true\n  xy: 1061, 252\n  size: 161, 172\n  orig: 250, 250\n  offset: 54, 34\n  index: -1\nEXPLO_2_2\n  rotate: false\n  xy: 853, 625\n  size: 185, 186\n  orig: 250, 250\n  offset: 37, 27\n  index: -1\nEXPLO_2_3\n  rotate: false\n  xy: 1061, 415\n  size: 217, 213\n  orig: 250, 250\n  offset: 24, 14\n  index: -1\nEXPLO_2_4\n  rotate: true\n  xy: 633, 816\n  size: 247, 249\n  orig: 250, 250\n  offset: 3, 1\n  index: -1\nEXPLO_2_5\n  rotate: false\n  xy: 896, 813\n  size: 250, 250\n  orig: 250, 250\n  offset: 0, 0\n  index: -1\nEXPLO_2_6\n  rotate: true\n  xy: 896, 257\n  size: 148, 157\n  orig: 250, 250\n  offset: 86, 70\n  index: -1\nEXPL_1\n  rotate: true\n  xy: 1148, 835\n  size: 91, 83\n  orig: 250, 250\n  offset: 80, 84\n  index: -1\nEXPL_2\n  rotate: true\n  xy: 1148, 928\n  size: 135, 133\n  orig: 250, 250\n  offset: 60, 59\n  index: -1\nEXPL_3\n  rotate: true\n  xy: 1040, 630\n  size: 181, 172\n  orig: 250, 250\n  offset: 31, 39\n  index: -1\nEXPL_4\n  rotate: true\n  xy: 633, 600\n  size: 214, 218\n  orig: 250, 250\n  offset: 20, 14\n  index: -1\nEXPL_5\n  rotate: true\n  xy: 665, 6\n  size: 223, 229\n  orig: 250, 250\n  offset: 16, 9\n  index: -1\nEXPL_6\n  rotate: false\n  xy: 435, 2\n  size: 228, 227\n  orig: 250, 250\n  offset: 15, 8\n  index: -1\nEXPL_7\n  rotate: false\n  xy: 633, 396\n  size: 216, 202\n  orig: 250, 250\n  offset: 18, 30\n  index: -1\nEXPL_8\n  rotate: false\n  xy: 851, 407\n  size: 208, 191\n  orig: 250, 250\n  offset: 22, 37\n  index: -1\nEXPL_9\n  rotate: true\n  xy: 1049, 153\n  size: 97, 170\n  orig: 250, 250\n  offset: 76, 45\n  index: -1\nnap\n  rotate: false\n  xy: 435, 231\n  size: 459, 158\n  orig: 461, 160\n  offset: 1, 1\n  index: -1\nno_1\n  rotate: true\n  xy: 1167, 11\n  size: 140, 114\n  orig: 142, 116\n  offset: 1, 1\n  index: -1\nno_2\n  rotate: true\n  xy: 1049, 9\n  size: 142, 116\n  orig: 142, 116\n  offset: 0, 0\n  index: -1\nno_3\n  rotate: true\n  xy: 896, 141\n  size: 114, 151\n  orig: 116, 153\n  offset: 1, 1\n  index: -1\nno_4\n  rotate: true\n  xy: 896, 25\n  size: 114, 151\n  orig: 116, 153\n  offset: 1, 1\n  index: -1\nthan\n  rotate: false\n  xy: 2, 35\n  size: 431, 354\n  orig: 431, 354\n  offset: 0, 0\n  index: -1\nwhite\n  rotate: false\n  xy: 2, 391\n  size: 629, 672\n  orig: 952, 782\n  offset: 161, 55\n  index: -1\n",["GIFTBOX_export.png"],{"skeleton":{"hash":"QiF47QY1HcP0jhNvN+oKZDxM3AU","spine":"3.8.99","x":-251.19,"y":-16.42,"width":512.32,"height":512.32,"images":"./GIFTBOX_IMAGES/","audio":"D:/TRONG NHAN/WORK/MYTOURVN"},"bones":[{"name":"root","x":1,"y":1},{"name":"than","parent":"root","length":122.41,"rotation":90,"x":5.2,"y":119.64,"scaleX":0.3,"scaleY":0.3},{"name":"nap","parent":"than","length":44.51,"x":254.04,"y":3.63},{"name":"no_2","parent":"nap","length":35.44,"rotation":52.85,"x":97.58,"y":9.42},{"name":"no_1","parent":"nap","length":33.92,"rotation":-42.95,"x":97.58,"y":-8.56},{"name":"no_4","parent":"nap","length":44.88,"rotation":34.9,"x":113.85,"y":4.28},{"name":"no_3","parent":"nap","length":39.05,"rotation":-26,"x":110.42,"y":-10.27},{"name":"EXPL_2","parent":"root","x":-2.87,"y":225.79,"scaleX":2.3816,"scaleY":2.3816}],"slots":[{"name":"base","bone":"root"},{"name":"than","bone":"than","attachment":"than"},{"name":"nap","bone":"nap","attachment":"nap"},{"name":"no_4","bone":"no_4","attachment":"no_4"},{"name":"no_3","bone":"no_3","attachment":"no_3"},{"name":"no_2","bone":"no_2","attachment":"no_2"},{"name":"no_1","bone":"no_1","attachment":"no_1"},{"name":"white","bone":"than","attachment":"white"},{"name":"EXPL_2","bone":"EXPL_2","attachment":"EXPL_1"},{"name":"EXPLO_2_1","bone":"EXPL_2","attachment":"EXPLO_2_6","blend":"additive"}],"skins":[{"name":"default","attachments":{"EXPLO_2_1":{"EXPLO_2_1":{"x":-13.22,"y":-10.49,"rotation":89.93,"width":250,"height":250},"EXPLO_2_2":{"x":-13.22,"y":-10.49,"rotation":89.93,"width":250,"height":250},"EXPLO_2_3":{"x":-13.22,"y":-10.49,"rotation":89.93,"width":250,"height":250},"EXPLO_2_4":{"x":-13.22,"y":-10.49,"rotation":89.93,"width":250,"height":250},"EXPLO_2_5":{"x":-13.22,"y":-10.49,"rotation":89.93,"width":250,"height":250},"EXPLO_2_6":{"x":-13.22,"y":-10.49,"scaleX":0.5785,"scaleY":0.5785,"rotation":89.93,"width":250,"height":250}},"EXPL_2":{"EXPL_1":{"x":2.87,"y":5.44,"scaleX":0.8605,"scaleY":0.8605,"width":250,"height":250},"EXPL_2":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_3":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_4":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_5":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_6":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_7":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_8":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250},"EXPL_9":{"x":2.87,"y":5.44,"scaleX":1.451,"scaleY":1.451,"width":250,"height":250}},"nap":{"nap":{"x":60.67,"rotation":-90,"width":461,"height":160}},"no_1":{"no_1":{"x":70.18,"y":-16.56,"rotation":-47.05,"width":142,"height":116}},"no_2":{"no_2":{"type":"mesh","hull":21,"width":142,"height":116,"uvs":[1,0.87093,0.97467,0.68098,0.91738,0.50271,0.82666,0.31275,0.71923,0.18709,0.56883,0.09065,0.41127,0.00882,0.29429,0,0.18686,0.00005,0.07704,0.06435,0.01497,0.18124,0,0.34198,0,0.5144,0.04601,0.68098,0.14389,0.80372,0.30145,0.88847,0.44708,0.94399,0.60225,1,0.71446,1,0.82427,0.98783,0.93648,0.94984,0.41951,0.28568,0.51406,0.22426,0.61054,0.23607,0.70123,0.30221,0.77841,0.42504,0.8363,0.54787,0.87682,0.68014,0.89998,0.77699,0.91541,0.85021,0.83051,0.88564,0.73982,0.91162,0.63948,0.91635,0.53915,0.88564,0.44653,0.82659,0.37513,0.73919,0.33847,0.62109,0.33654,0.50062,0.3597,0.40142,0.11089,0.24979,0.21876,0.32204,0.10072,0.42418,0.20248,0.48896,0.09665,0.58612,0.23504,0.63844,0.18823,0.74308,0.28592,0.78792,0.17399,0.11525,0.29203,0.20245,0.32866,0.06293,0.43653,0.12273],"triangles":[49,7,6,47,9,8,50,6,5,49,6,50,47,7,49,7,47,8,48,49,50,48,47,49,22,50,5,23,22,5,4,23,5,39,9,47,40,39,47,10,9,39,21,48,50,21,50,22,24,23,4,24,4,3,48,40,47,11,10,39,38,48,21,40,48,38,41,11,39,41,39,40,25,24,3,42,41,40,42,40,38,37,42,38,25,3,2,12,11,41,26,25,2,43,12,41,43,41,42,22,35,36,44,42,37,44,37,36,43,42,44,27,26,2,13,12,43,27,2,1,38,22,37,37,22,36,45,43,44,13,43,45,28,27,1,46,44,36,46,36,35,45,44,46,14,13,45,21,22,38,34,35,25,22,24,35,23,24,22,0,29,28,0,28,1,25,33,34,24,25,35,33,25,26,26,32,33,26,27,31,28,30,27,30,28,29,15,46,35,15,35,34,14,45,46,15,14,46,30,31,27,31,32,26,16,34,33,15,34,16,20,29,0,30,29,20,19,31,30,19,30,20,17,33,32,16,33,17,18,32,31,18,31,19,17,32,18],"vertices":[-12.07,-5.45,4.1,-20.84,23.07,-32.41,46.65,-42.2,67.61,-44.61,91.39,-40.63,114.95,-34.68,128.81,-25.47,140.97,-16.25,148.89,-0.89,147.73,15.24,138.17,31.39,126.09,47.33,109.21,58.79,89.54,61.74,65.77,56.07,45.39,48.72,23.91,40.59,11.21,30.97,-0.37,20.42,-10.41,7.29,94.63,-9.79,88.23,-23.58,76.48,-30.76,61.58,-32.42,44.24,-27.68,29.09,-21.29,15.23,-12.53,5.83,-5.56,-1.05,-0.11,6.08,10.44,14.53,20.62,25.55,29.66,39.06,35.43,53.68,37.91,67.88,35.95,80.31,28.17,88.96,17.2,93.29,6.04,132.07,13.35,114.8,10.79,121.01,30.35,104.95,27.62,110.13,45.67,90.8,38.64,88.77,52.33,74.57,48.1,134.36,-4.5,114.89,-6.55,120.51,-22.6,104.12,-26.32],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,0,40,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,42]}},"no_3":{"no_3":{"x":76.68,"y":-11.8,"rotation":-64,"width":116,"height":153}},"no_4":{"no_4":{"x":77.06,"y":5.03,"rotation":-124.9,"width":116,"height":153}},"than":{"than":{"type":"mesh","hull":25,"width":431,"height":354,"uvs":[0,0.15152,0.01344,0.31,0.02402,0.43469,0.03378,0.54975,0.04365,0.66606,0.05255,0.77098,0.06022,0.86145,0.12983,0.88338,0.21654,0.9107,0.31196,0.94076,0.41063,0.97185,0.49993,0.99999,0.5931,0.9679,0.68483,0.93631,0.78143,0.90304,0.87222,0.87177,0.93773,0.84921,0.94565,0.75893,0.95509,0.65129,0.96722,0.51305,0.97844,0.38507,0.9897,0.25673,1,0.13928,0.51118,0,0,0.13295,0.51095,0.31136,0.16436,0.20294,0.27715,0.23822,0.71955,0.23796,0.83393,0.19771,0.82405,0.33044,0.81517,0.44981,0.80637,0.56799,0.79599,0.70753,0.78737,0.82328,0.68882,0.85592,0.69507,0.73025,0.70189,0.59315,0.70794,0.47152,0.71341,0.36154,0.17492,0.34612,0.18475,0.4795,0.19453,0.61212,0.20287,0.72534,0.2098,0.81927,0.30802,0.86131,0.30263,0.75248,0.29698,0.63856,0.29029,0.50352,0.28382,0.37287,0.40847,0.38811,0.40984,0.52835,0.4071,0.65523,0.40984,0.78712,0.41121,0.88896,0.60867,0.39646,0.60319,0.51165,0.59907,0.63018,0.59907,0.75373,0.59359,0.87894,0.91308,0.29462,0.90486,0.41816,0.898,0.5417,0.88566,0.67526,0.8788,0.78879,0.91951,0.1676,0.61282,0.27551,0.40361,0.27778,0.07385,0.17462,0.08623,0.32634,0.1068,0.46324,0.11091,0.59012,0.12051,0.69196,0.12463,0.79213],"triangles":[68,0,24,65,23,22,23,68,24,29,23,65,26,68,23,28,23,29,27,26,23,21,65,22,66,23,28,67,27,23,23,25,67,60,29,65,60,65,21,1,0,68,66,25,23,69,68,26,1,68,69,30,28,29,30,29,60,40,26,27,69,26,40,39,66,28,39,28,30,49,27,67,40,27,49,20,60,21,50,67,25,49,67,50,55,25,66,55,66,39,61,30,60,61,60,20,2,1,69,31,39,30,31,30,61,70,69,40,2,69,70,38,55,39,38,39,31,41,40,49,70,40,41,48,49,50,41,49,48,50,25,51,56,55,38,57,11,25,19,61,20,51,25,52,48,50,51,62,31,61,62,61,19,3,2,70,32,38,31,32,31,62,71,70,41,3,70,71,37,56,38,37,38,32,42,41,48,71,41,42,56,25,55,57,56,37,47,48,51,42,48,47,18,62,19,52,47,51,25,11,52,4,3,71,63,32,62,63,62,18,72,71,42,4,71,72,33,37,32,33,32,63,43,42,47,72,42,43,36,57,37,36,37,33,46,47,52,43,47,46,58,57,36,25,56,57,17,63,18,5,4,72,11,53,52,46,52,53,64,33,63,64,63,17,73,72,43,5,72,73,44,43,46,73,43,44,34,36,33,34,33,64,16,64,17,35,58,36,35,36,34,45,46,53,44,46,45,6,5,73,15,34,64,15,64,16,11,57,58,59,58,35,7,73,44,6,73,7,11,54,53,45,53,54,14,35,34,14,34,15,8,44,45,7,44,8,13,59,35,13,35,14,9,45,54,8,45,9,11,58,59,12,59,13,10,9,54,11,10,54,59,12,11],"vertices":[298.06,218.07,241.96,212.28,197.82,207.72,157.09,203.51,115.92,199.26,78.78,195.42,46.75,192.11,38.99,162.11,29.32,124.74,18.67,83.62,7.67,41.09,-2.29,2.6,9.07,-37.56,20.25,-77.09,32.03,-118.73,43.1,-157.86,51.08,-186.09,83.04,-189.51,121.15,-193.58,170.08,-198.8,215.39,-203.64,260.82,-208.49,302.4,-212.93,351.7,-2.25,304.64,218.07,241.48,-2.15,279.86,147.23,267.37,98.62,267.47,-92.06,281.71,-141.36,234.73,-137.1,192.47,-133.27,150.64,-129.48,101.24,-125,60.26,-121.29,48.71,-78.81,93.19,-81.51,141.73,-84.45,184.78,-87.05,223.72,-89.41,229.18,142.68,181.96,138.44,135.01,134.23,94.93,130.63,61.68,127.65,46.8,85.31,85.33,87.64,125.65,90.07,173.46,92.95,219.71,95.74,214.31,42.02,164.67,41.43,119.75,42.61,73.06,41.43,37.01,40.84,211.36,-44.27,170.58,-41.9,128.62,-40.13,84.88,-40.13,40.56,-37.77,247.41,-175.47,203.67,-171.92,159.94,-168.97,112.66,-163.65,72.47,-160.7,292.37,-178.24,254.17,-46.06,253.37,44.11,289.89,186.24,236.18,180.9,187.72,172.04,142.8,170.26,106.75,166.13,71.29,164.35],"edges":[44,46,46,48,0,48,50,22,54,52,16,18,58,56,26,28,0,2,2,4,4,6,6,8,8,10,10,12,32,34,34,36,36,38,38,40,40,42,42,44,60,58,62,60,64,62,66,64,28,68,68,66,26,70,72,70,74,72,76,74,56,78,78,76,80,52,82,80,84,82,86,84,16,88,88,86,18,90,92,90,94,92,96,94,54,98,98,96,18,20,20,22,22,24,24,26,28,30,30,32,44,130,130,58,50,132,132,56,50,134,134,54,0,136,136,52,12,14,14,16]}},"white":{"white":{"x":252.47,"y":3.56,"rotation":-89.38,"width":952,"height":782}}}}],"events":{"Firework":{},"Voucher":{}},"animations":{"drop":{"slots":{"EXPLO_2_1":{"attachment":[{"name":null}]},"EXPL_2":{"attachment":[{"name":null}]},"white":{"attachment":[{"name":null}]}},"bones":{"than":{"translate":[{"y":470.46,"curve":0.25,"c4":0.27},{"time":0.2667}],"scale":[{"curve":0.25,"c4":0.27},{"time":0.2667,"x":1.3,"y":0.7,"curve":0.25,"c3":0.75},{"time":0.3333,"x":0.8,"y":1.2,"curve":0.25,"c3":0.75},{"time":0.4,"x":1.2,"y":0.8,"curve":0.25,"c3":0.75},{"time":0.4667,"x":1.1,"y":0.9},{"time":0.5,"x":0.9,"y":1.1},{"time":0.5333}]},"nap":{"translate":[{"curve":0.25,"c4":0.33},{"time":0.2667,"x":403.67,"curve":0.25,"c4":0.27},{"time":0.3333,"x":-23.28,"curve":0,"c2":0.44,"c3":0.75},{"time":0.4,"x":213.93,"curve":0.25,"c4":0.04},{"time":0.4667,"x":-48.85},{"time":0.5333,"x":3.16}]}}},"explosion2":{"slots":{"EXPLO_2_1":{"attachment":[{"name":null},{"time":0.6,"name":"EXPLO_2_1"},{"time":0.6333,"name":"EXPLO_2_2"},{"time":0.6667,"name":"EXPLO_2_3"},{"time":0.7,"name":"EXPLO_2_4"},{"time":0.7333,"name":"EXPLO_2_5"},{"time":0.7667,"name":"EXPLO_2_6"},{"time":0.8,"name":null}]},"EXPL_2":{"attachment":[{"name":null},{"time":0.6,"name":"EXPL_1"},{"time":0.6333,"name":"EXPL_2"},{"time":0.6667,"name":"EXPL_3"},{"time":0.7,"name":"EXPL_4"},{"time":0.7333,"name":"EXPL_5"},{"time":0.7667,"name":"EXPL_6"},{"time":0.8,"name":"EXPL_7"},{"time":0.8333,"name":"EXPL_8"},{"time":0.8667,"name":null}]},"nap":{"attachment":[{"time":0.6333,"name":null}]},"no_1":{"attachment":[{"time":0.6333,"name":null}]},"no_2":{"attachment":[{"time":0.6333,"name":null}]},"no_3":{"attachment":[{"time":0.6333,"name":null}]},"no_4":{"attachment":[{"time":0.6333,"name":null}]},"than":{"attachment":[{"time":0.6333,"name":null}]},"white":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.0667,"color":"ffffff00","curve":0,"c2":0.41,"c3":0.273,"c4":0.83},{"time":0.6,"color":"ffffffff"}],"attachment":[{"time":0.6333,"name":null}]}},"bones":{"than":{"scale":[{"curve":0,"c2":0.41,"c3":0,"c4":0.95},{"time":0.0667,"x":1.2,"y":0.8,"curve":0,"c2":0.41,"c3":0,"c4":0.95},{"time":0.1333,"x":1.1,"y":0.9,"curve":0,"c2":0.41,"c3":0,"c4":0.95},{"time":0.2,"x":1.2,"y":0.8,"curve":0,"c2":0.41,"c3":0,"c4":0.95},{"time":0.2667,"x":0.907,"y":1.093,"curve":0,"c2":0.41,"c3":0,"c4":0.95},{"time":0.3333,"x":1.1,"y":0.9,"curve":0,"c2":0.41,"c3":0,"c4":0.95},{"time":0.4667,"x":0.61,"y":1.354,"curve":0.685,"c2":0.05,"c4":0.54},{"time":0.6,"x":1.2,"y":0.8}]},"EXPL_2":{"scale":[{"time":0.6,"x":0.517,"y":0.517}]}},"events":[{"time":0.6333,"name":"Firework"},{"time":0.7667,"name":"Voucher"}]},"idle3":{"slots":{"EXPLO_2_1":{"attachment":[{"name":null}]},"EXPL_2":{"attachment":[{"name":null}]},"white":{"attachment":[{"name":null}]}},"bones":{"than":{"rotate":[{"time":0.5333,"angle":-0.27}],"scale":[{"curve":0.44,"c3":0.968,"c4":0.68},{"time":0.3,"x":0.571,"curve":0.079,"c2":0.41,"c3":0.356,"c4":1.12},{"time":0.6}]},"nap":{"translate":[{"x":56.78,"curve":0.383,"c2":0.65,"c3":0.786},{"time":0.1333,"x":67.63,"curve":0.25,"c3":0.75},{"time":0.4333,"curve":0,"c2":0.45,"c3":0.482,"c4":0.79},{"time":0.6,"x":56.78}]},"no_2":{"rotate":[{"angle":6.44,"curve":0.356,"c2":0.56,"c3":0.781},{"time":0.1667,"curve":0.25,"c3":0.75},{"time":0.4667,"angle":19.12,"curve":0.095,"c2":0.31,"c3":0.509,"c4":0.68},{"time":0.6,"angle":6.44}]},"no_1":{"rotate":[{"angle":-8.91,"curve":0.316,"c2":0.53,"c3":0.781},{"time":0.2,"curve":0.25,"c3":0.75},{"time":0.5,"angle":-19.83,"curve":0.11,"c2":0.31,"c3":0.496,"c4":0.67},{"time":0.6,"angle":-8.91}]},"no_4":{"rotate":[{"angle":2.13,"curve":0.395,"c2":0.61,"c3":0.764},{"time":0.1,"curve":0.25,"c3":0.75},{"time":0.4,"angle":13.82,"curve":0.081,"c2":0.33,"c3":0.569,"c4":0.75},{"time":0.6,"angle":2.13}]},"no_3":{"rotate":[{"angle":-8.7,"curve":0.382,"c2":0.59,"c3":0.775},{"time":0.1333,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-36.42,"curve":0.086,"c2":0.32,"c3":0.534,"c4":0.71},{"time":0.6,"angle":-8.7}]}},"deform":{"default":{"than":{"than":[{"curve":0.25,"c3":0.903,"c4":0.52},{"time":0.3,"curve":0.079,"c2":0.41,"c3":0.75,"vertices":[-10.95601,2.60003,-4.81488,13.78601,-0.00034,18.09507,-0.00034,19.52097,-1.91484,16.25417,0.63774,10.84705,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,-7.89394,-0.00034,-13.93791,-0.00034,-16.28385,-0.00034,-13.1949,-0.00034,-6.04391,-0.00034,3.61601,-0.00034,0,-0.00034,0,-0.00034,2.26401,-0.00034,0,-0.00034,0,-0.00034,-2.98197,-1.18018,3.136,-0.00034,-6.95798,-0.00034,-12.00497,-0.00034,-14.67193,-0.00034,-13.28594,-0.00034,-6.958,-0.00034,-9.70197,-0.00034,-15.16895,-0.00034,-17.72294,-0.00034,-16.7289,-0.00034,-12.7529,-0.00034,10.65897,-0.00034,15.49908,-0.00034,16.61203,-0.00034,13.99596,-0.00034,7.79103,-0.00034,6.41204,-0.00034,12.82405,-0.00034,16.09805,-0.00034,15.64301,-0.00034,10.27704,-4.72571,12.56003,-0.00034,14.44399,-0.00034,11.93199,-0.00034,8.79199,-0.00034,3.76803,0.99127,-6.79198,-0.00034,-10.75396,-0.00034,-13.58395,-0.00034,-8.48996,-0.00034,-4.52801,-0.00034,-5.21,-0.00034,-11.01294,-0.00034,-11.86294,-0.00034,-11.50993,-0.00034,-6.70096,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,0,-0.00034,5.99501,-0.00034,10.90004,4.54878,7.63005,2.41722,9.09096,-0.00034,0.54499]},{"time":0.6}]}}}}}},[0]]],0,0,[0],[-1],[81]],[[[64,"ItemWinner"],[66,"ItemWinner",33554432,[-9,-10],[[1,-2,[0,"6a606hNzlLpqqTAXDGFzGt"],[5,670,94]],[224,-8,[0,"cdU5nomflBaaim4DBRE2pb"],-7,-6,-5,-4,-3]],[10,"80oVypFg9Ea5rK9ZuAfYlh",-1,0],[1,0,617,0]],[79,"Container",33554432,1,[-12,-13,-14,-15,-16],[[1,-11,[0,"3242DVCWtMepBNxixN/wo6"],[5,620,94]]],[10,"2cAB3vm0dMyI7ZFgt7HE8v",1,0]],[22,"Time",33554432,2,[[[5,-17,[0,"c68UOAlNhN171Umca6yVvF"],[5,100,94],[0,0,0.5]],-18,[87,8,-19,[0,"76P+K5zndN1ppeFGoea51Q"]]],4,1,4],[10,"138ACOBEhDCJHTetcW3C00",1,0],[1,-310,0,0]],[80,"Info",33554432,2,[[5,-20,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,330,94],[0,0,0.5]],[71,-22,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"3559aEckTBCrqIgOqHLWCp2","Info",1]],[4,4292269782],-21,0,1,2,3]],[10,"80sHzFG7JGGoavuxiZPhMa",1,0],[1,-210,0,0]],[67,"Bg",33554432,1,[[[1,-23,[0,"f7NISe7HdAD68SLfhnddy8"],[5,670,94]],-24],4,1],[10,"a8OMyFqFRGBqO1fu7Q0rmJ",1,0]],[22,"Hotel",33554432,2,[[[5,-25,[0,"c26oB5IEFDeZoU/2iWJOdV"],[5,320,94],[0,0,0.5]],-26],4,1],[10,"82XTisSuhOsK38GikvNS0G",1,0],[1,-200,0,0]],[22,"Winner",33554432,2,[[[5,-27,[0,"c68UOAlNhN171Umca6yVvF"],[5,170,47],[0,0,0.5]],-28],4,1],[10,"8aK+R4pM9M2YIhahqJqu60",1,0],[1,140,15,0]],[22,"Price",33554432,2,[[[5,-29,[0,"c68UOAlNhN171Umca6yVvF"],[5,170,47],[0,0,0.5]],-30],4,1],[10,"4e/TVRUaZFHJwrL1PpdXPr",1,0],[1,140,-15,0]],[43,0,5,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[189,"02/07\n16:59",0,25,25,30,1,3,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380]],[190,"Khách sạn mường mường a",0,25,25,22,1,false,false,true,6,[0,"e2nYXZ9BRFtbGcC6Eq01tk"],[4,4294060816]],[191,"La Minh Trường",0,20,20,30,1,false,7,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380]],[97,"2",0,20,20,30,1,false,true,8,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4284769380]]],0,[0,7,1,0,0,1,0,17,11,0,26,13,0,63,12,0,18,10,0,27,9,0,0,1,0,-1,5,0,-2,2,0,0,2,0,-1,3,0,-2,6,0,-3,7,0,-4,8,0,-5,4,0,0,3,0,-2,10,0,0,3,0,0,4,0,5,4,0,0,4,0,0,5,0,-2,9,0,0,6,0,-2,11,0,0,7,0,-2,12,0,0,8,0,-2,13,0,15,1,30],[0,0,0,0,9,11,13],[4,8,9,10,1,2,2],[3,3,6,7,4,5,5]],[[{"name":"biginfor_board_pink","rect":{"x":209,"y":489,"width":200,"height":190},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":190},"rotated":true,"capInsets":[60,60,60,60],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"textbox_bg","rect":{"x":1199,"y":1934,"width":100,"height":110},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":110},"rotated":false,"capInsets":[30,30,30,30],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"button_expand","rect":{"x":1305,"y":1934,"width":108,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":108},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[65,"Gobold Uplow","Gobold Uplow.ttf"]],0,0,[],[],[]],[[{"name":"mainscreen_timing_a","rect":{"x":3,"y":641,"width":548,"height":119},"offset":{"x":0,"y":22},"originalSize":{"width":560,"height":175},"rotated":true,"capInsets":[0,0,0,0],"texture":"1481fc330@6c48a","packable":true}],[0],0,[0],[3],[2]],[[{"name":"title","rect":{"x":1371,"y":1183,"width":638,"height":168},"offset":{"x":0,"y":0},"originalSize":{"width":638,"height":168},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[{"name":"btt_dangnhap_facebook","rect":{"x":1596,"y":363,"width":445,"height":73},"offset":{"x":0,"y":0},"originalSize":{"width":445,"height":73},"rotated":false,"capInsets":[0,0,0,0],"texture":"1b77d2bd0@6c48a","packable":true}],[0],0,[0],[3],[0]],[[[225,[[226,"ShadowFlow",[[227,"ShadowStage"]]],[228,"ForwardFlow",1,[[229,"ForwardStage",[[230,["default"]],[231,true,1,["default"]]]]]]]]],0,0,[],[],[]]]]
